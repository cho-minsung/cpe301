
midterm2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001056  000010ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001056  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800144  00800144  0000112e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c6  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000951  00000000  00000000  00002eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00003800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076d  00000000  00000000  000042d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_1>
       8:	0c 94 42 03 	jmp	0x684	; 0x684 <__vector_2>
       c:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_3>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_7>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_10>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_16>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_19>
      50:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_20>
      54:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_33>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_41>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 e5       	ldi	r30, 0x56	; 86
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a4 34       	cpi	r26, 0x44	; 68
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a4 e4       	ldi	r26, 0x44	; 68
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a0 37       	cpi	r26, 0x70	; 112
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 27 02 	call	0x44e	; 0x44e <main>
      ea:	0c 94 29 08 	jmp	0x1052	; 0x1052 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <changeDirection>:
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
	sendString_UART();
      f2:	95 b1       	in	r25, 0x05	; 5
      f4:	80 e1       	ldi	r24, 0x10	; 16
      f6:	89 27       	eor	r24, r25
      f8:	85 b9       	out	0x05, r24	; 5
      fa:	95 b1       	in	r25, 0x05	; 5
      fc:	80 e2       	ldi	r24, 0x20	; 32
      fe:	89 27       	eor	r24, r25
     100:	85 b9       	out	0x05, r24	; 5
     102:	08 95       	ret

00000104 <initDebouncer2>:
     104:	92 e0       	ldi	r25, 0x02	; 2
     106:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     10a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     10e:	29 98       	cbi	0x05, 1	; 5
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     116:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
     11a:	08 95       	ret

0000011c <startDebouncer2>:
     11c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     126:	85 e0       	ldi	r24, 0x05	; 5
     128:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     12c:	08 95       	ret

0000012e <stopDebouncer2>:
     12e:	e0 e7       	ldi	r30, 0x70	; 112
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	8d 7f       	andi	r24, 0xFD	; 253
     136:	80 83       	st	Z, r24
     138:	e1 eb       	ldi	r30, 0xB1	; 177
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	8a 7f       	andi	r24, 0xFA	; 250
     140:	80 83       	st	Z, r24
     142:	08 95       	ret

00000144 <initADC>:
     144:	0f 93       	push	r16
     146:	ec e7       	ldi	r30, 0x7C	; 124
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	90 81       	ld	r25, Z
     14c:	30 e4       	ldi	r19, 0x40	; 64
     14e:	63 9f       	mul	r22, r19
     150:	b0 01       	movw	r22, r0
     152:	11 24       	eor	r1, r1
     154:	89 2b       	or	r24, r25
     156:	68 2b       	or	r22, r24
     158:	80 e2       	ldi	r24, 0x20	; 32
     15a:	48 9f       	mul	r20, r24
     15c:	a0 01       	movw	r20, r0
     15e:	11 24       	eor	r1, r1
     160:	46 2b       	or	r20, r22
     162:	40 83       	st	Z, r20
     164:	ea e7       	ldi	r30, 0x7A	; 122
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	22 95       	swap	r18
     16c:	22 0f       	add	r18, r18
     16e:	20 7e       	andi	r18, 0xE0	; 224
     170:	87 68       	ori	r24, 0x87	; 135
     172:	28 2b       	or	r18, r24
     174:	20 83       	st	Z, r18
     176:	eb e7       	ldi	r30, 0x7B	; 123
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	08 2b       	or	r16, r24
     17e:	00 83       	st	Z, r16
     180:	0f 91       	pop	r16
     182:	08 95       	ret

00000184 <initUART>:
     184:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     188:	94 e0       	ldi	r25, 0x04	; 4
     18a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     18e:	e1 ec       	ldi	r30, 0xC1	; 193
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	90 81       	ld	r25, Z
     194:	90 69       	ori	r25, 0x90	; 144
     196:	90 83       	st	Z, r25
     198:	44 0f       	add	r20, r20
     19a:	44 0f       	add	r20, r20
     19c:	44 0f       	add	r20, r20
     19e:	22 0f       	add	r18, r18
     1a0:	42 2b       	or	r20, r18
     1a2:	20 e1       	ldi	r18, 0x10	; 16
     1a4:	62 9f       	mul	r22, r18
     1a6:	b0 01       	movw	r22, r0
     1a8:	11 24       	eor	r1, r1
     1aa:	64 2b       	or	r22, r20
     1ac:	20 e4       	ldi	r18, 0x40	; 64
     1ae:	82 9f       	mul	r24, r18
     1b0:	c0 01       	movw	r24, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	68 2b       	or	r22, r24
     1b6:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     1ba:	08 95       	ret

000001bc <convert_float_to_string>:
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	9f 93       	push	r25
     1c2:	8f 93       	push	r24
     1c4:	7f 93       	push	r23
     1c6:	6f 93       	push	r22
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	9f 93       	push	r25
     1ce:	8f 93       	push	r24
     1d0:	1f 92       	push	r1
     1d2:	84 e1       	ldi	r24, 0x14	; 20
     1d4:	8f 93       	push	r24
     1d6:	c6 e4       	ldi	r28, 0x46	; 70
     1d8:	d1 e0       	ldi	r29, 0x01	; 1
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	0e 94 31 05 	call	0xa62	; 0xa62 <snprintf>
     1e2:	d0 93 67 01 	sts	0x0167, r29	; 0x800167 <dataString+0x1>
     1e6:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <dataString>
     1ea:	8d b7       	in	r24, 0x3d	; 61
     1ec:	9e b7       	in	r25, 0x3e	; 62
     1ee:	0a 96       	adiw	r24, 0x0a	; 10
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	9e bf       	out	0x3e, r25	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	8d bf       	out	0x3d, r24	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <sendString_UART>:
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <uartBUSY+0x1>
     208:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <uartBUSY>
     20c:	e1 ec       	ldi	r30, 0xC1	; 193
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 66       	ori	r24, 0x68	; 104
     214:	80 83       	st	Z, r24
     216:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <uartBUSY>
     21a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <uartBUSY+0x1>
     21e:	89 2b       	or	r24, r25
     220:	d1 f7       	brne	.-12     	; 0x216 <sendString_UART+0x16>
     222:	08 95       	ret

00000224 <initTimer3Delay_100ms>:
}


void initTimer3Delay_100ms(){
//Initiates Timer3CTC as 100ms delay
	TCCR3A = (ICP_WGM_11_10);
     224:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (ICP_WGM_13_12 << WGM32);
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	OCR3A  = (6249U); //100ms
     22e:	89 e6       	ldi	r24, 0x69	; 105
     230:	98 e1       	ldi	r25, 0x18	; 24
     232:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
     236:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
     23a:	08 95       	ret

0000023c <calculate_RPM_x4>:
}

float calculate_RPM_x4(){
//Calculates RPM
	
	while(!((PIND & (1U<<PIND3)) && (PIND & (1U<<PIND2))));
     23c:	4b 9b       	sbis	0x09, 3	; 9
     23e:	fe cf       	rjmp	.-4      	; 0x23c <calculate_RPM_x4>
     240:	4a 9b       	sbis	0x09, 2	; 9
     242:	fc cf       	rjmp	.-8      	; 0x23c <calculate_RPM_x4>
    while((PIND & (1U<<PIND3)) || (PIND & (1U<<PIND2)));   //Prevents glitches, make sure it starts on the beginning of a low level
     244:	4b 99       	sbic	0x09, 3	; 9
     246:	fe cf       	rjmp	.-4      	; 0x244 <calculate_RPM_x4+0x8>
     248:	4a 99       	sbic	0x09, 2	; 9
     24a:	fc cf       	rjmp	.-8      	; 0x244 <calculate_RPM_x4+0x8>
														   //Program will stall if motor is not moving
	
	EICRA = 0x05; //Logic Change Setting
     24c:	85 e0       	ldi	r24, 0x05	; 5
     24e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0x03; //Int1:0 enabled
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	8d bb       	out	0x1d, r24	; 29
	
	ICP_BUSY4 = true; //Signals Input Capture is busy
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ICP_BUSY4+0x1>
     25e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ICP_BUSY4>
	ICP_BUSY1 = true; //Signals Input Capture is busy
     262:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <ICP_BUSY1+0x1>
     266:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <ICP_BUSY1>
	
	
	TIMSK1 = (1U<<5); //Enable Input Capture Interrupt
     26a:	80 e2       	ldi	r24, 0x20	; 32
     26c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIMSK4 = (1U<<5); //Enable Input Capture Interrupt
     270:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
	TIMSK3 = (1U<<1); //Enable Output Compare Interrupt
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
	
	
	TCNT3 = 0x00;	//Reset Timer3
     27a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     27e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	TCNT1 = 0x00;   //Reset Counter1
     282:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     286:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TCNT4 = 0x00;   //Reset Counter4
     28a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__DATA_REGION_ORIGIN__+0x45>
     28e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__DATA_REGION_ORIGIN__+0x44>
	
	TCCR1B = (0x07) | (1U<<6); //Set counter1 as rising edge
     292:	87 e4       	ldi	r24, 0x47	; 71
     294:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR4B = (0x07) | (1U<<6); //Set counter4 as rising edge
     298:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__DATA_REGION_ORIGIN__+0x41>
	TCCR3B = (0x04); //Set timer3 scaler
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	
	while(ICP_BUSY1 || ICP_BUSY4); //While 100 ms happens, let counter4 count the poles of the encoder
     2a2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ICP_BUSY1>
     2a6:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ICP_BUSY1+0x1>
     2aa:	89 2b       	or	r24, r25
     2ac:	d1 f7       	brne	.-12     	; 0x2a2 <calculate_RPM_x4+0x66>
     2ae:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ICP_BUSY4>
     2b2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ICP_BUSY4+0x1>
     2b6:	89 2b       	or	r24, r25
     2b8:	a1 f7       	brne	.-24     	; 0x2a2 <calculate_RPM_x4+0x66>
	EIMSK = 0x00; //Reset interrupts
     2ba:	1d ba       	out	0x1d, r1	; 29
	EICRA = 0x00; //Reset interrupts
     2bc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	PORTE &= ~(1U); //Reset Software Interrupt
     2c0:	70 98       	cbi	0x0e, 0	; 14
	PORTB &= ~(1U); //Reset Software Interrupt
     2c2:	28 98       	cbi	0x05, 0	; 5

	TCCR3B &= ~(0x07); //Clear clock
     2c4:	e1 e9       	ldi	r30, 0x91	; 145
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	88 7f       	andi	r24, 0xF8	; 248
     2cc:	80 83       	st	Z, r24
	TCCR1B &= ~(0x07 | (1U<<6)); //Clear clock
     2ce:	e1 e8       	ldi	r30, 0x81	; 129
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	88 7b       	andi	r24, 0xB8	; 184
     2d6:	80 83       	st	Z, r24
	TCCR4B &= ~(0x07 | (1U<<6)); //Clear clock
     2d8:	e1 ea       	ldi	r30, 0xA1	; 161
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	88 7b       	andi	r24, 0xB8	; 184
     2e0:	80 83       	st	Z, r24

	return (RPM1.ticks + RPM4.ticks)* RPM_x4_conversion; //Return RPM value
     2e2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <RPM1>
     2e6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <RPM1+0x1>
     2ea:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <RPM4>
     2ee:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <RPM4+0x1>
     2f2:	68 0f       	add	r22, r24
     2f4:	79 1f       	adc	r23, r25
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 36 04 	call	0x86c	; 0x86c <__floatunsisf>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e2       	ldi	r20, 0x20	; 32
     304:	5e e3       	ldi	r21, 0x3E	; 62
     306:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
}
     30a:	08 95       	ret

0000030c <calculateRPM_x2>:

float calculateRPM_x2(){
	//Calculates RPM
	
	while(!(PIND & (1<<PIND2)));
     30c:	4a 9b       	sbis	0x09, 2	; 9
     30e:	fe cf       	rjmp	.-4      	; 0x30c <calculateRPM_x2>
	while(PIND & (1<<PIND2));	//Prevents glitches, make sure it starts on the beginning of a low level
     310:	4a 99       	sbic	0x09, 2	; 9
     312:	fe cf       	rjmp	.-4      	; 0x310 <calculateRPM_x2+0x4>
								//Program will stall if motor is not moving
	EICRA = 0x01; //Enable Logic Change interrupt
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0x01; //Enable int1
     31a:	8d bb       	out	0x1d, r24	; 29
	ICP_BUSY4 = true; //Signals Input Capture is busy
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ICP_BUSY4+0x1>
     324:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ICP_BUSY4>
	TIMSK4 = (1U<<5); //Enable Input Capture Interrupt
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
	TIMSK3 = (1U<<1); //Enable Output Compare Interrupt
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
	TCNT3 = 0x00;	//Reset Timer3
     334:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     338:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	TCNT4 = 0x00;   //Reset Counter4
     33c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__DATA_REGION_ORIGIN__+0x45>
     340:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__DATA_REGION_ORIGIN__+0x44>
	TCCR4B = (0x07) | (1U<<6); //Set counter4 as rising edge
     344:	87 e4       	ldi	r24, 0x47	; 71
     346:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__DATA_REGION_ORIGIN__+0x41>
	TCCR3B = (0x04<<0); //Set timer3 scaler
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	while(ICP_BUSY4); //While 100 ms happens, let counter4 count the poles of the encoder
     350:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ICP_BUSY4>
     354:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ICP_BUSY4+0x1>
     358:	89 2b       	or	r24, r25
     35a:	d1 f7       	brne	.-12     	; 0x350 <calculateRPM_x2+0x44>
	EIMSK = 0x00;
     35c:	1d ba       	out	0x1d, r1	; 29
	EICRA = 0x00;
     35e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	PORTE &= ~(1U<<0); //Reset Software Interrupt
     362:	70 98       	cbi	0x0e, 0	; 14
	PORTB &= ~(1U<<0);
     364:	28 98       	cbi	0x05, 0	; 5
	TCCR3B &= ~(0x07); //Clear clock
     366:	e1 e9       	ldi	r30, 0x91	; 145
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	88 7f       	andi	r24, 0xF8	; 248
     36e:	80 83       	st	Z, r24
	TCCR4B &= ~(0x07 | (1U<<6)); //Clear clock
     370:	e1 ea       	ldi	r30, 0xA1	; 161
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	88 7b       	andi	r24, 0xB8	; 184
     378:	80 83       	st	Z, r24
	
	return RPM4.ticks * RPM_x2_conversion; //Return RPM value
     37a:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <RPM4>
     37e:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <RPM4+0x1>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 36 04 	call	0x86c	; 0x86c <__floatunsisf>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 ea       	ldi	r20, 0xA0	; 160
     390:	5e e3       	ldi	r21, 0x3E	; 62
     392:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
}
     396:	08 95       	ret

00000398 <calculateRPM_x1>:


float calculateRPM_x1(){
	//Calculates RPM
	
	while(!(PIND & (1<<PIND2))); 
     398:	4a 9b       	sbis	0x09, 2	; 9
     39a:	fe cf       	rjmp	.-4      	; 0x398 <calculateRPM_x1>
	while(PIND & (1<<PIND2));	//Prevents glitches, make sure it starts on the beginning of a low level
     39c:	4a 99       	sbic	0x09, 2	; 9
     39e:	fe cf       	rjmp	.-4      	; 0x39c <calculateRPM_x1+0x4>
								//Program will stall if motor is not moving
	
	ICP_BUSY4 = true; //Signals Input Capture is busy
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ICP_BUSY4+0x1>
     3a8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ICP_BUSY4>
	TCNT3 = 0x00;	//Reset Timer3
     3ac:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     3b0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	TCNT4 = 0x00;   //Reset Counter4
     3b4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__DATA_REGION_ORIGIN__+0x45>
     3b8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__DATA_REGION_ORIGIN__+0x44>
	TIMSK4 |= (1U<<5); //Enable Input Capture Interrupt
     3bc:	e2 e7       	ldi	r30, 0x72	; 114
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	80 62       	ori	r24, 0x20	; 32
     3c4:	80 83       	st	Z, r24
	TIMSK3 |= (1U<<1); //Enable Output Compare Interrupt
     3c6:	e1 e7       	ldi	r30, 0x71	; 113
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
	TCCR4B |= (0x07) | (1U<<6); //Set counter4 as rising edge
     3d0:	e1 ea       	ldi	r30, 0xA1	; 161
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	87 64       	ori	r24, 0x47	; 71
     3d8:	80 83       	st	Z, r24
	TCCR3B |= (0x04<<0); //Set timer3 scaler
     3da:	e1 e9       	ldi	r30, 0x91	; 145
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	84 60       	ori	r24, 0x04	; 4
     3e2:	80 83       	st	Z, r24
	
	while(ICP_BUSY4); //While 100 ms happens, let counter4 count the poles of the encoder
     3e4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ICP_BUSY4>
     3e8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ICP_BUSY4+0x1>
     3ec:	89 2b       	or	r24, r25
     3ee:	d1 f7       	brne	.-12     	; 0x3e4 <calculateRPM_x1+0x4c>
	
	PORTE &= ~(1U<<0); //Reset Software Interrupt
     3f0:	70 98       	cbi	0x0e, 0	; 14
	PORTB &= ~(1U<<0); //Reset Software Interrupt
     3f2:	28 98       	cbi	0x05, 0	; 5
	TCCR3B &= ~(0x07); //Clear clock
     3f4:	e1 e9       	ldi	r30, 0x91	; 145
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	88 7f       	andi	r24, 0xF8	; 248
     3fc:	80 83       	st	Z, r24
	TCCR4B &= ~(0x07); //Clear clock
     3fe:	e1 ea       	ldi	r30, 0xA1	; 161
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 7f       	andi	r24, 0xF8	; 248
     406:	80 83       	st	Z, r24
	
	return RPM4.ticks * RPM_x1_conversion; //Return RPM value
     408:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <RPM4>
     40c:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <RPM4+0x1>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 36 04 	call	0x86c	; 0x86c <__floatunsisf>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	5f e3       	ldi	r21, 0x3F	; 63
     420:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
}
     424:	08 95       	ret

00000426 <initTimer0PWM>:

void initTimer0PWM(){
//Initiates PWM1
	TCCR0A |= (PWM_nonInvert << COM1A0);
     426:	84 b5       	in	r24, 0x24	; 36
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (PWM_WGM_11_10 << WGM10);
     42c:	84 b5       	in	r24, 0x24	; 36
     42e:	81 60       	ori	r24, 0x01	; 1
     430:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (PWM_WGM_12    << WGM12);
     432:	85 b5       	in	r24, 0x25	; 37
     434:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (0x01);
     436:	ee e6       	ldi	r30, 0x6E	; 110
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
     440:	08 95       	ret

00000442 <startPWM0>:
}

void startPWM0(){
//Starts PWM0
	TCNT0 = 0x00;
     442:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x00;
     444:	17 bc       	out	0x27, r1	; 39
	TCCR0B |= (PWM_8Scalar  << CS10);
     446:	85 b5       	in	r24, 0x25	; 37
     448:	82 60       	ori	r24, 0x02	; 2
     44a:	85 bd       	out	0x25, r24	; 37
     44c:	08 95       	ret

0000044e <main>:
RPM_t RPM1;

int main(){
	
	//PortB.5:4
	DDRB |= (1U<<5) | (1U<<4);
     44e:	84 b1       	in	r24, 0x04	; 4
     450:	80 63       	ori	r24, 0x30	; 48
     452:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1U<<5);
     454:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1U<<4);
     456:	2c 98       	cbi	0x05, 4	; 5
	//
	
	//INT0
	DDRD &= ~(1U<<2);
     458:	52 98       	cbi	0x0a, 2	; 10
	PORTD &= ~(1U<<2);
     45a:	5a 98       	cbi	0x0b, 2	; 11
	//
	
	//INT1
	DDRD &= ~(1U<<3);
     45c:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1U<<3);
     45e:	5b 98       	cbi	0x0b, 3	; 11
	//
	
	//PortE.0 used to trigger Input Capture
	DDRE |= (1U<<0);
     460:	68 9a       	sbi	0x0d, 0	; 13
	PORTE &= ~(1U<<0);
     462:	70 98       	cbi	0x0e, 0	; 14
	//
	
	//PortB.0 used to trigger Input Capture
	DDRB |= (1U<<0);
     464:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1U<<0);
     466:	28 98       	cbi	0x05, 0	; 5
	//
	
	//PortE.1 Input for T4
	DDRE &= ~(1U<<1);
     468:	69 98       	cbi	0x0d, 1	; 13
	//
	
	//PortD.5 Input For T1
	DDRD &= ~(1U<<5);
     46a:	55 98       	cbi	0x0a, 5	; 10
	//
	
	//OC0A
	DDRD |= (1U<<6);
     46c:	56 9a       	sbi	0x0a, 6	; 10
	//
	
	//Initiating functions
	initUART(async, noParity, oneStop, chSize8);
     46e:	23 e0       	ldi	r18, 0x03	; 3
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 c2 00 	call	0x184	; 0x184 <initUART>
	initTimer0PWM();
     47a:	0e 94 13 02 	call	0x426	; 0x426 <initTimer0PWM>
	initTimer3Delay_100ms();
     47e:	0e 94 12 01 	call	0x224	; 0x224 <initTimer3Delay_100ms>
	initDebouncer2(230);
     482:	86 ee       	ldi	r24, 0xE6	; 230
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 82 00 	call	0x104	; 0x104 <initDebouncer2>
	startPWM0();
     48a:	0e 94 21 02 	call	0x442	; 0x442 <startPWM0>
	initADC(ch0, internalVoltage, true, ADC_autoTrigger_en, ADC_timer0OVR_trigger); //This uses timer1 over flow to trigger a conversion of the ADC
     48e:	04 e0       	ldi	r16, 0x04	; 4
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	63 e0       	ldi	r22, 0x03	; 3
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 a2 00 	call	0x144	; 0x144 <initADC>
	sei();
     49c:	78 94       	sei
	ADCSRB |= (autoTrigger << ADTS0);
}

uint8_t readADC(){
//Reads ADC
	return (ADCH);
     49e:	c9 e7       	ldi	r28, 0x79	; 121
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f5 e3       	ldi	r31, 0x35	; 53
     4a6:	af 2e       	mov	r10, r31
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	0f 2e       	mov	r0, r31
     4b0:	fa e3       	ldi	r31, 0x3A	; 58
     4b2:	cf 2e       	mov	r12, r31
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	df 2e       	mov	r13, r31
     4b8:	f0 2d       	mov	r31, r0
     4ba:	0f 2e       	mov	r0, r31
     4bc:	ff e3       	ldi	r31, 0x3F	; 63
     4be:	ef 2e       	mov	r14, r31
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	ff 2e       	mov	r15, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	05 e0       	ldi	r16, 0x05	; 5
     4c8:	11 e0       	ldi	r17, 0x01	; 1
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f5 e1       	ldi	r31, 0x15	; 21
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f0 2d       	mov	r31, r0
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f5 e2       	ldi	r31, 0x25	; 37
     4da:	6f 2e       	mov	r6, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	7f 2e       	mov	r7, r31
     4e0:	f0 2d       	mov	r31, r0
	sei();
	
	while(1){
	
		//If debouncer determines button is pressed, polarity of the motor will change.
		if(buttonPRESSED){
     4e2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonPRESSED>
     4e6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <buttonPRESSED+0x1>
     4ea:	89 2b       	or	r24, r25
     4ec:	31 f0       	breq	.+12     	; 0x4fa <main+0xac>
			buttonPRESSED = false;
     4ee:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <buttonPRESSED+0x1>
     4f2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <buttonPRESSED>
			changeDirection(); //Change direction of the motor
     4f6:	0e 94 79 00 	call	0xf2	; 0xf2 <changeDirection>
	ADCSRB |= (autoTrigger << ADTS0);
}

uint8_t readADC(){
//Reads ADC
	return (ADCH);
     4fa:	88 81       	ld	r24, Y
		if(buttonPRESSED){
			buttonPRESSED = false;
			changeDirection(); //Change direction of the motor
		}
		
		if(readADC() < 5){   //If ADC is below 5, then RPM is 0
     4fc:	85 30       	cpi	r24, 0x05	; 5
     4fe:	98 f4       	brcc	.+38     	; 0x526 <main+0xd8>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     500:	10 93 67 01 	sts	0x0167, r17	; 0x800167 <dataString+0x1>
     504:	00 93 66 01 	sts	0x0166, r16	; 0x800166 <dataString>
	sendString_UART();
     508:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     50c:	90 92 67 01 	sts	0x0167, r9	; 0x800167 <dataString+0x1>
     510:	80 92 66 01 	sts	0x0166, r8	; 0x800166 <dataString>
	sendString_UART();
     514:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     518:	70 92 67 01 	sts	0x0167, r7	; 0x800167 <dataString+0x1>
     51c:	60 92 66 01 	sts	0x0166, r6	; 0x800166 <dataString>
	sendString_UART();
     520:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
     524:	24 c0       	rjmp	.+72     	; 0x56e <main+0x120>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     526:	b0 92 67 01 	sts	0x0167, r11	; 0x800167 <dataString+0x1>
     52a:	a0 92 66 01 	sts	0x0166, r10	; 0x800166 <dataString>
	sendString_UART();
     52e:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
		}
		else
		{
			//Sends x1, x2, and x4 encoding through UART every 1.5 seconds
			sendMessage("x1: ");
			convert_float_to_string(calculateRPM_x1());
     532:	0e 94 cc 01 	call	0x398	; 0x398 <calculateRPM_x1>
     536:	0e 94 de 00 	call	0x1bc	; 0x1bc <convert_float_to_string>
			sendString_UART();	
     53a:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     53e:	d0 92 67 01 	sts	0x0167, r13	; 0x800167 <dataString+0x1>
     542:	c0 92 66 01 	sts	0x0166, r12	; 0x800166 <dataString>
	sendString_UART();
     546:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
			sendMessage("x1: ");
			convert_float_to_string(calculateRPM_x1());
			sendString_UART();	
			
			sendMessage("x2: ");
			convert_float_to_string(calculateRPM_x2());
     54a:	0e 94 86 01 	call	0x30c	; 0x30c <calculateRPM_x2>
     54e:	0e 94 de 00 	call	0x1bc	; 0x1bc <convert_float_to_string>
			sendString_UART();
     552:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
	TCCR2B &= ~(0x05);
}

void sendMessage(char *data){
//Send a message through UART
	dataString = data;
     556:	f0 92 67 01 	sts	0x0167, r15	; 0x800167 <dataString+0x1>
     55a:	e0 92 66 01 	sts	0x0166, r14	; 0x800166 <dataString>
	sendString_UART();
     55e:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
			sendMessage("x2: ");
			convert_float_to_string(calculateRPM_x2());
			sendString_UART();

			sendMessage("x4: ");
			convert_float_to_string(calculate_RPM_x4());
     562:	0e 94 1e 01 	call	0x23c	; 0x23c <calculate_RPM_x4>
     566:	0e 94 de 00 	call	0x1bc	; 0x1bc <convert_float_to_string>
			sendString_UART();
     56a:	0e 94 00 01 	call	0x200	; 0x200 <sendString_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	2f ef       	ldi	r18, 0xFF	; 255
     570:	8d e3       	ldi	r24, 0x3D	; 61
     572:	99 e4       	ldi	r25, 0x49	; 73
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x126>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x130>
     57e:	00 00       	nop
     580:	b0 cf       	rjmp	.-160    	; 0x4e2 <main+0x94>

00000582 <__vector_3>:
	TCNT0 = 0x00;
	OCR0A = 0x00;
	TCCR0B |= (PWM_8Scalar  << CS10);
}

ISR(PCINT0_vect){
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	2f 93       	push	r18
     58e:	3f 93       	push	r19
     590:	4f 93       	push	r20
     592:	5f 93       	push	r21
     594:	6f 93       	push	r22
     596:	7f 93       	push	r23
     598:	8f 93       	push	r24
     59a:	9f 93       	push	r25
     59c:	af 93       	push	r26
     59e:	bf 93       	push	r27
     5a0:	ef 93       	push	r30
     5a2:	ff 93       	push	r31
//When a pin change is detected, start debouncer
	startDebouncer2();
     5a4:	0e 94 8e 00 	call	0x11c	; 0x11c <startDebouncer2>
}
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <__vector_7>:

ISR(TIMER2_COMPA_vect){
     5ca:	1f 92       	push	r1
     5cc:	0f 92       	push	r0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	5f 93       	push	r21
     5dc:	6f 93       	push	r22
     5de:	7f 93       	push	r23
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
//Debouncer
	debounce2Counter++;
     5ec:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     5f0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     5fa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
	
	if(debounce2Counter == 2){
     5fe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     602:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     606:	02 97       	sbiw	r24, 0x02	; 2
     608:	71 f4       	brne	.+28     	; 0x626 <__vector_7+0x5c>
		//If debouncer reaches time limit check if the pin is high
		if(PINB & (1U<<PINB1)){
     60a:	19 9b       	sbis	0x03, 1	; 3
     60c:	06 c0       	rjmp	.+12     	; 0x61a <__vector_7+0x50>
		//If High, button was pressed
		buttonPRESSED = true;	
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <buttonPRESSED+0x1>
     616:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <buttonPRESSED>
		}
		//Stop debouncer, and reset counter
		stopDebouncer2();
     61a:	0e 94 97 00 	call	0x12e	; 0x12e <stopDebouncer2>
		debounce2Counter = 0;
     61e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
     622:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
	}
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_1>:


ISR(INT0_vect){
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
//Change the edge detection for the counter
	if(ICP_BUSY4){
     65a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ICP_BUSY4>
     65e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ICP_BUSY4+0x1>
     662:	89 2b       	or	r24, r25
     664:	31 f0       	breq	.+12     	; 0x672 <__vector_1+0x2a>
		TCCR4B ^= (0x01);
     666:	e1 ea       	ldi	r30, 0xA1	; 161
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	90 81       	ld	r25, Z
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	89 27       	eor	r24, r25
     670:	80 83       	st	Z, r24
	}
}
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	9f 91       	pop	r25
     678:	8f 91       	pop	r24
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <__vector_2>:

ISR(INT1_vect){
     684:	1f 92       	push	r1
     686:	0f 92       	push	r0
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	0f 92       	push	r0
     68c:	11 24       	eor	r1, r1
     68e:	8f 93       	push	r24
     690:	9f 93       	push	r25
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
//Change the edge detection for the counter
	if(ICP_BUSY1){
     696:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ICP_BUSY1>
     69a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ICP_BUSY1+0x1>
     69e:	89 2b       	or	r24, r25
     6a0:	31 f0       	breq	.+12     	; 0x6ae <__vector_2+0x2a>
		TCCR1B ^= (0x01);
     6a2:	e1 e8       	ldi	r30, 0x81	; 129
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	90 81       	ld	r25, Z
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	89 27       	eor	r24, r25
     6ac:	80 83       	st	Z, r24
	}
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <__vector_41>:

ISR(TIMER4_CAPT_vect){
     6c0:	1f 92       	push	r1
     6c2:	0f 92       	push	r0
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	0f 92       	push	r0
     6c8:	11 24       	eor	r1, r1
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
//Timer4 Capture interrupt
	TIMSK4 &= ~(1U<<5);
     6d2:	e2 e7       	ldi	r30, 0x72	; 114
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	8f 7d       	andi	r24, 0xDF	; 223
     6da:	80 83       	st	Z, r24
	RPM4.ticks = (float)(ICR4);
     6dc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__DATA_REGION_ORIGIN__+0x46>
     6e0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__DATA_REGION_ORIGIN__+0x47>
     6e4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <RPM4+0x1>
     6e8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <RPM4>
	ICP_BUSY4 = false;
     6ec:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <ICP_BUSY4+0x1>
     6f0:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <ICP_BUSY4>
}
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <__vector_10>:


ISR(TIMER1_CAPT_vect){
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
//Timer1 Capture Interrupt
	TIMSK1 &= ~(1U<<5);
     718:	ef e6       	ldi	r30, 0x6F	; 111
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	8f 7d       	andi	r24, 0xDF	; 223
     720:	80 83       	st	Z, r24
	RPM1.ticks = (float)(ICR1);
     722:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     726:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     72a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <RPM1+0x1>
     72e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <RPM1>
	ICP_BUSY1 = false;
     732:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <ICP_BUSY1+0x1>
     736:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <ICP_BUSY1>
}
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <__vector_33>:

ISR(TIMER3_COMPA_vect){
     74c:	1f 92       	push	r1
     74e:	0f 92       	push	r0
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
//Timer3 Compare Interrupt
	PORTE |= (1U<<0); //Sets Timer4 Capture Interrupt
     75e:	70 9a       	sbi	0x0e, 0	; 14
	if(ICP_BUSY1) PORTB |= (1U<<0); //Sets timer1 capture interrupt
     760:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ICP_BUSY1>
     764:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ICP_BUSY1+0x1>
     768:	89 2b       	or	r24, r25
     76a:	09 f0       	breq	.+2      	; 0x76e <__vector_33+0x22>
     76c:	28 9a       	sbi	0x05, 0	; 5
	TIMSK3 &= ~(1U<<1);
     76e:	e1 e7       	ldi	r30, 0x71	; 113
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8d 7f       	andi	r24, 0xFD	; 253
     776:	80 83       	st	Z, r24
}
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_20>:

ISR(USART0_TX_vect){
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	8f 93       	push	r24
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
	//TX ISR
	UCSR0B &= ~((txIEN << TXCIE0) |
     79a:	e1 ec       	ldi	r30, 0xC1	; 193
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	87 7b       	andi	r24, 0xB7	; 183
     7a2:	80 83       	st	Z, r24
	(txEN  << TXEN0));   //Waits to turn off TX until transmit buffer is empty
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	8f 91       	pop	r24
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <__vector_16>:

ISR(TIMER0_OVF_vect){
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	8f 93       	push	r24
     7c0:	ef 93       	push	r30
     7c2:	ff 93       	push	r31
	//Enable ADC interrupt
	ADCSRA |= (1U<<ADIE);
     7c4:	ea e7       	ldi	r30, 0x7A	; 122
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	88 60       	ori	r24, 0x08	; 8
     7cc:	80 83       	st	Z, r24
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	8f 91       	pop	r24
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <__vector_21>:

ISR(ADC_vect){
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	8f 93       	push	r24
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	//Disable ADC interrupt
	ADCSRA &= ~(1U<<ADIE);
     7ee:	ea e7       	ldi	r30, 0x7A	; 122
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	87 7f       	andi	r24, 0xF7	; 247
     7f6:	80 83       	st	Z, r24
	ADCSRB |= (autoTrigger << ADTS0);
}

uint8_t readADC(){
//Reads ADC
	return (ADCH);
     7f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}

ISR(ADC_vect){
	//Disable ADC interrupt
	ADCSRA &= ~(1U<<ADIE);
	OCR0A = readADC();
     7fc:	87 bd       	out	0x27, r24	; 39
}
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	8f 91       	pop	r24
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <__vector_19>:


ISR(USART0_UDRE_vect){
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
	if(*dataString != '\0'){  //Send data until array is empty
     820:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <dataString>
     824:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <dataString+0x1>
     828:	80 81       	ld	r24, Z
     82a:	88 23       	and	r24, r24
     82c:	69 f0       	breq	.+26     	; 0x848 <__vector_19+0x3a>
		UDR0 = *dataString;   //Data register of UART
     82e:	80 81       	ld	r24, Z
     830:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		dataString++;         //Increase location of string
     834:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <dataString>
     838:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <dataString+0x1>
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <dataString+0x1>
     842:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <dataString>
     846:	09 c0       	rjmp	.+18     	; 0x85a <__vector_19+0x4c>
	}
	else{
		UCSR0B &= ~(drIEN << UDRIE0); //Disable interrupts
     848:	e1 ec       	ldi	r30, 0xC1	; 193
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8f 7d       	andi	r24, 0xDF	; 223
     850:	80 83       	st	Z, r24
		uartBUSY = false;
     852:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <uartBUSY+0x1>
     856:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <uartBUSY>
	}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__floatunsisf>:
     86c:	e8 94       	clt
     86e:	09 c0       	rjmp	.+18     	; 0x882 <__floatsisf+0x12>

00000870 <__floatsisf>:
     870:	97 fb       	bst	r25, 7
     872:	3e f4       	brtc	.+14     	; 0x882 <__floatsisf+0x12>
     874:	90 95       	com	r25
     876:	80 95       	com	r24
     878:	70 95       	com	r23
     87a:	61 95       	neg	r22
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	8f 4f       	sbci	r24, 0xFF	; 255
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	99 23       	and	r25, r25
     884:	a9 f0       	breq	.+42     	; 0x8b0 <__floatsisf+0x40>
     886:	f9 2f       	mov	r31, r25
     888:	96 e9       	ldi	r25, 0x96	; 150
     88a:	bb 27       	eor	r27, r27
     88c:	93 95       	inc	r25
     88e:	f6 95       	lsr	r31
     890:	87 95       	ror	r24
     892:	77 95       	ror	r23
     894:	67 95       	ror	r22
     896:	b7 95       	ror	r27
     898:	f1 11       	cpse	r31, r1
     89a:	f8 cf       	rjmp	.-16     	; 0x88c <__floatsisf+0x1c>
     89c:	fa f4       	brpl	.+62     	; 0x8dc <__floatsisf+0x6c>
     89e:	bb 0f       	add	r27, r27
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <__floatsisf+0x36>
     8a2:	60 ff       	sbrs	r22, 0
     8a4:	1b c0       	rjmp	.+54     	; 0x8dc <__floatsisf+0x6c>
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	8f 4f       	sbci	r24, 0xFF	; 255
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	16 c0       	rjmp	.+44     	; 0x8dc <__floatsisf+0x6c>
     8b0:	88 23       	and	r24, r24
     8b2:	11 f0       	breq	.+4      	; 0x8b8 <__floatsisf+0x48>
     8b4:	96 e9       	ldi	r25, 0x96	; 150
     8b6:	11 c0       	rjmp	.+34     	; 0x8da <__floatsisf+0x6a>
     8b8:	77 23       	and	r23, r23
     8ba:	21 f0       	breq	.+8      	; 0x8c4 <__floatsisf+0x54>
     8bc:	9e e8       	ldi	r25, 0x8E	; 142
     8be:	87 2f       	mov	r24, r23
     8c0:	76 2f       	mov	r23, r22
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__floatsisf+0x5e>
     8c4:	66 23       	and	r22, r22
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <__floatsisf+0x74>
     8c8:	96 e8       	ldi	r25, 0x86	; 134
     8ca:	86 2f       	mov	r24, r22
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	2a f0       	brmi	.+10     	; 0x8dc <__floatsisf+0x6c>
     8d2:	9a 95       	dec	r25
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	88 1f       	adc	r24, r24
     8da:	da f7       	brpl	.-10     	; 0x8d2 <__floatsisf+0x62>
     8dc:	88 0f       	add	r24, r24
     8de:	96 95       	lsr	r25
     8e0:	87 95       	ror	r24
     8e2:	97 f9       	bld	r25, 7
     8e4:	08 95       	ret

000008e6 <__mulsf3>:
     8e6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3x>
     8ea:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__fp_round>
     8ee:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_pscA>
     8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
     8f4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscB>
     8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
     8fa:	95 23       	and	r25, r21
     8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
     8fe:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_inf>
     902:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_nan>
     906:	11 24       	eor	r1, r1
     908:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_szero>

0000090c <__mulsf3x>:
     90c:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_split3>
     910:	70 f3       	brcs	.-36     	; 0x8ee <__mulsf3+0x8>

00000912 <__mulsf3_pse>:
     912:	95 9f       	mul	r25, r21
     914:	c1 f3       	breq	.-16     	; 0x906 <__stack+0x7>
     916:	95 0f       	add	r25, r21
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	55 1f       	adc	r21, r21
     91c:	62 9f       	mul	r22, r18
     91e:	f0 01       	movw	r30, r0
     920:	72 9f       	mul	r23, r18
     922:	bb 27       	eor	r27, r27
     924:	f0 0d       	add	r31, r0
     926:	b1 1d       	adc	r27, r1
     928:	63 9f       	mul	r22, r19
     92a:	aa 27       	eor	r26, r26
     92c:	f0 0d       	add	r31, r0
     92e:	b1 1d       	adc	r27, r1
     930:	aa 1f       	adc	r26, r26
     932:	64 9f       	mul	r22, r20
     934:	66 27       	eor	r22, r22
     936:	b0 0d       	add	r27, r0
     938:	a1 1d       	adc	r26, r1
     93a:	66 1f       	adc	r22, r22
     93c:	82 9f       	mul	r24, r18
     93e:	22 27       	eor	r18, r18
     940:	b0 0d       	add	r27, r0
     942:	a1 1d       	adc	r26, r1
     944:	62 1f       	adc	r22, r18
     946:	73 9f       	mul	r23, r19
     948:	b0 0d       	add	r27, r0
     94a:	a1 1d       	adc	r26, r1
     94c:	62 1f       	adc	r22, r18
     94e:	83 9f       	mul	r24, r19
     950:	a0 0d       	add	r26, r0
     952:	61 1d       	adc	r22, r1
     954:	22 1f       	adc	r18, r18
     956:	74 9f       	mul	r23, r20
     958:	33 27       	eor	r19, r19
     95a:	a0 0d       	add	r26, r0
     95c:	61 1d       	adc	r22, r1
     95e:	23 1f       	adc	r18, r19
     960:	84 9f       	mul	r24, r20
     962:	60 0d       	add	r22, r0
     964:	21 1d       	adc	r18, r1
     966:	82 2f       	mov	r24, r18
     968:	76 2f       	mov	r23, r22
     96a:	6a 2f       	mov	r22, r26
     96c:	11 24       	eor	r1, r1
     96e:	9f 57       	subi	r25, 0x7F	; 127
     970:	50 40       	sbci	r21, 0x00	; 0
     972:	9a f0       	brmi	.+38     	; 0x99a <__mulsf3_pse+0x88>
     974:	f1 f0       	breq	.+60     	; 0x9b2 <__mulsf3_pse+0xa0>
     976:	88 23       	and	r24, r24
     978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	bb 1f       	adc	r27, r27
     980:	66 1f       	adc	r22, r22
     982:	77 1f       	adc	r23, r23
     984:	88 1f       	adc	r24, r24
     986:	91 50       	subi	r25, 0x01	; 1
     988:	50 40       	sbci	r21, 0x00	; 0
     98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
     98c:	9e 3f       	cpi	r25, 0xFE	; 254
     98e:	51 05       	cpc	r21, r1
     990:	80 f0       	brcs	.+32     	; 0x9b2 <__mulsf3_pse+0xa0>
     992:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_inf>
     996:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_szero>
     99a:	5f 3f       	cpi	r21, 0xFF	; 255
     99c:	e4 f3       	brlt	.-8      	; 0x996 <__mulsf3_pse+0x84>
     99e:	98 3e       	cpi	r25, 0xE8	; 232
     9a0:	d4 f3       	brlt	.-12     	; 0x996 <__mulsf3_pse+0x84>
     9a2:	86 95       	lsr	r24
     9a4:	77 95       	ror	r23
     9a6:	67 95       	ror	r22
     9a8:	b7 95       	ror	r27
     9aa:	f7 95       	ror	r31
     9ac:	e7 95       	ror	r30
     9ae:	9f 5f       	subi	r25, 0xFF	; 255
     9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x90>
     9b2:	fe 2b       	or	r31, r30
     9b4:	88 0f       	add	r24, r24
     9b6:	91 1d       	adc	r25, r1
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	97 f9       	bld	r25, 7
     9be:	08 95       	ret

000009c0 <__fp_inf>:
     9c0:	97 f9       	bld	r25, 7
     9c2:	9f 67       	ori	r25, 0x7F	; 127
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	08 95       	ret

000009cc <__fp_nan>:
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	80 ec       	ldi	r24, 0xC0	; 192
     9d0:	08 95       	ret

000009d2 <__fp_pscA>:
     9d2:	00 24       	eor	r0, r0
     9d4:	0a 94       	dec	r0
     9d6:	16 16       	cp	r1, r22
     9d8:	17 06       	cpc	r1, r23
     9da:	18 06       	cpc	r1, r24
     9dc:	09 06       	cpc	r0, r25
     9de:	08 95       	ret

000009e0 <__fp_pscB>:
     9e0:	00 24       	eor	r0, r0
     9e2:	0a 94       	dec	r0
     9e4:	12 16       	cp	r1, r18
     9e6:	13 06       	cpc	r1, r19
     9e8:	14 06       	cpc	r1, r20
     9ea:	05 06       	cpc	r0, r21
     9ec:	08 95       	ret

000009ee <__fp_round>:
     9ee:	09 2e       	mov	r0, r25
     9f0:	03 94       	inc	r0
     9f2:	00 0c       	add	r0, r0
     9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_round+0xc>
     9f6:	88 23       	and	r24, r24
     9f8:	52 f0       	brmi	.+20     	; 0xa0e <__fp_round+0x20>
     9fa:	bb 0f       	add	r27, r27
     9fc:	40 f4       	brcc	.+16     	; 0xa0e <__fp_round+0x20>
     9fe:	bf 2b       	or	r27, r31
     a00:	11 f4       	brne	.+4      	; 0xa06 <__fp_round+0x18>
     a02:	60 ff       	sbrs	r22, 0
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__fp_round+0x20>
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	8f 4f       	sbci	r24, 0xFF	; 255
     a0c:	9f 4f       	sbci	r25, 0xFF	; 255
     a0e:	08 95       	ret

00000a10 <__fp_split3>:
     a10:	57 fd       	sbrc	r21, 7
     a12:	90 58       	subi	r25, 0x80	; 128
     a14:	44 0f       	add	r20, r20
     a16:	55 1f       	adc	r21, r21
     a18:	59 f0       	breq	.+22     	; 0xa30 <__fp_splitA+0x10>
     a1a:	5f 3f       	cpi	r21, 0xFF	; 255
     a1c:	71 f0       	breq	.+28     	; 0xa3a <__fp_splitA+0x1a>
     a1e:	47 95       	ror	r20

00000a20 <__fp_splitA>:
     a20:	88 0f       	add	r24, r24
     a22:	97 fb       	bst	r25, 7
     a24:	99 1f       	adc	r25, r25
     a26:	61 f0       	breq	.+24     	; 0xa40 <__fp_splitA+0x20>
     a28:	9f 3f       	cpi	r25, 0xFF	; 255
     a2a:	79 f0       	breq	.+30     	; 0xa4a <__fp_splitA+0x2a>
     a2c:	87 95       	ror	r24
     a2e:	08 95       	ret
     a30:	12 16       	cp	r1, r18
     a32:	13 06       	cpc	r1, r19
     a34:	14 06       	cpc	r1, r20
     a36:	55 1f       	adc	r21, r21
     a38:	f2 cf       	rjmp	.-28     	; 0xa1e <__fp_split3+0xe>
     a3a:	46 95       	lsr	r20
     a3c:	f1 df       	rcall	.-30     	; 0xa20 <__fp_splitA>
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <__fp_splitA+0x30>
     a40:	16 16       	cp	r1, r22
     a42:	17 06       	cpc	r1, r23
     a44:	18 06       	cpc	r1, r24
     a46:	99 1f       	adc	r25, r25
     a48:	f1 cf       	rjmp	.-30     	; 0xa2c <__fp_splitA+0xc>
     a4a:	86 95       	lsr	r24
     a4c:	71 05       	cpc	r23, r1
     a4e:	61 05       	cpc	r22, r1
     a50:	08 94       	sec
     a52:	08 95       	ret

00000a54 <__fp_zero>:
     a54:	e8 94       	clt

00000a56 <__fp_szero>:
     a56:	bb 27       	eor	r27, r27
     a58:	66 27       	eor	r22, r22
     a5a:	77 27       	eor	r23, r23
     a5c:	cb 01       	movw	r24, r22
     a5e:	97 f9       	bld	r25, 7
     a60:	08 95       	ret

00000a62 <snprintf>:
     a62:	ae e0       	ldi	r26, 0x0E	; 14
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__prologue_saves__+0x1c>
     a6e:	0d 89       	ldd	r16, Y+21	; 0x15
     a70:	1e 89       	ldd	r17, Y+22	; 0x16
     a72:	8f 89       	ldd	r24, Y+23	; 0x17
     a74:	98 8d       	ldd	r25, Y+24	; 0x18
     a76:	26 e0       	ldi	r18, 0x06	; 6
     a78:	2c 83       	std	Y+4, r18	; 0x04
     a7a:	1a 83       	std	Y+2, r17	; 0x02
     a7c:	09 83       	std	Y+1, r16	; 0x01
     a7e:	97 ff       	sbrs	r25, 7
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <snprintf+0x24>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e8       	ldi	r25, 0x80	; 128
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9e 83       	std	Y+6, r25	; 0x06
     a8a:	8d 83       	std	Y+5, r24	; 0x05
     a8c:	ae 01       	movw	r20, r28
     a8e:	45 5e       	subi	r20, 0xE5	; 229
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	69 8d       	ldd	r22, Y+25	; 0x19
     a94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 61 05 	call	0xac2	; 0xac2 <vfprintf>
     a9e:	4d 81       	ldd	r20, Y+5	; 0x05
     aa0:	5e 81       	ldd	r21, Y+6	; 0x06
     aa2:	57 fd       	sbrc	r21, 7
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <snprintf+0x58>
     aa6:	2f 81       	ldd	r18, Y+7	; 0x07
     aa8:	38 85       	ldd	r19, Y+8	; 0x08
     aaa:	42 17       	cp	r20, r18
     aac:	53 07       	cpc	r21, r19
     aae:	0c f4       	brge	.+2      	; 0xab2 <snprintf+0x50>
     ab0:	9a 01       	movw	r18, r20
     ab2:	f8 01       	movw	r30, r16
     ab4:	e2 0f       	add	r30, r18
     ab6:	f3 1f       	adc	r31, r19
     ab8:	10 82       	st	Z, r1
     aba:	2e 96       	adiw	r28, 0x0e	; 14
     abc:	e4 e0       	ldi	r30, 0x04	; 4
     abe:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__epilogue_restores__+0x1c>

00000ac2 <vfprintf>:
     ac2:	ab e0       	ldi	r26, 0x0B	; 11
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e7 e6       	ldi	r30, 0x67	; 103
     ac8:	f5 e0       	ldi	r31, 0x05	; 5
     aca:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__prologue_saves__>
     ace:	6c 01       	movw	r12, r24
     ad0:	7b 01       	movw	r14, r22
     ad2:	8a 01       	movw	r16, r20
     ad4:	fc 01       	movw	r30, r24
     ad6:	17 82       	std	Z+7, r1	; 0x07
     ad8:	16 82       	std	Z+6, r1	; 0x06
     ada:	83 81       	ldd	r24, Z+3	; 0x03
     adc:	81 ff       	sbrs	r24, 1
     ade:	cc c1       	rjmp	.+920    	; 0xe78 <vfprintf+0x3b6>
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	3c 01       	movw	r6, r24
     ae6:	f6 01       	movw	r30, r12
     ae8:	93 81       	ldd	r25, Z+3	; 0x03
     aea:	f7 01       	movw	r30, r14
     aec:	93 fd       	sbrc	r25, 3
     aee:	85 91       	lpm	r24, Z+
     af0:	93 ff       	sbrs	r25, 3
     af2:	81 91       	ld	r24, Z+
     af4:	7f 01       	movw	r14, r30
     af6:	88 23       	and	r24, r24
     af8:	09 f4       	brne	.+2      	; 0xafc <vfprintf+0x3a>
     afa:	ba c1       	rjmp	.+884    	; 0xe70 <vfprintf+0x3ae>
     afc:	85 32       	cpi	r24, 0x25	; 37
     afe:	39 f4       	brne	.+14     	; 0xb0e <vfprintf+0x4c>
     b00:	93 fd       	sbrc	r25, 3
     b02:	85 91       	lpm	r24, Z+
     b04:	93 ff       	sbrs	r25, 3
     b06:	81 91       	ld	r24, Z+
     b08:	7f 01       	movw	r14, r30
     b0a:	85 32       	cpi	r24, 0x25	; 37
     b0c:	29 f4       	brne	.+10     	; 0xb18 <vfprintf+0x56>
     b0e:	b6 01       	movw	r22, r12
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     b16:	e7 cf       	rjmp	.-50     	; 0xae6 <vfprintf+0x24>
     b18:	91 2c       	mov	r9, r1
     b1a:	21 2c       	mov	r2, r1
     b1c:	31 2c       	mov	r3, r1
     b1e:	ff e1       	ldi	r31, 0x1F	; 31
     b20:	f3 15       	cp	r31, r3
     b22:	d8 f0       	brcs	.+54     	; 0xb5a <vfprintf+0x98>
     b24:	8b 32       	cpi	r24, 0x2B	; 43
     b26:	79 f0       	breq	.+30     	; 0xb46 <vfprintf+0x84>
     b28:	38 f4       	brcc	.+14     	; 0xb38 <vfprintf+0x76>
     b2a:	80 32       	cpi	r24, 0x20	; 32
     b2c:	79 f0       	breq	.+30     	; 0xb4c <vfprintf+0x8a>
     b2e:	83 32       	cpi	r24, 0x23	; 35
     b30:	a1 f4       	brne	.+40     	; 0xb5a <vfprintf+0x98>
     b32:	23 2d       	mov	r18, r3
     b34:	20 61       	ori	r18, 0x10	; 16
     b36:	1d c0       	rjmp	.+58     	; 0xb72 <vfprintf+0xb0>
     b38:	8d 32       	cpi	r24, 0x2D	; 45
     b3a:	61 f0       	breq	.+24     	; 0xb54 <vfprintf+0x92>
     b3c:	80 33       	cpi	r24, 0x30	; 48
     b3e:	69 f4       	brne	.+26     	; 0xb5a <vfprintf+0x98>
     b40:	23 2d       	mov	r18, r3
     b42:	21 60       	ori	r18, 0x01	; 1
     b44:	16 c0       	rjmp	.+44     	; 0xb72 <vfprintf+0xb0>
     b46:	83 2d       	mov	r24, r3
     b48:	82 60       	ori	r24, 0x02	; 2
     b4a:	38 2e       	mov	r3, r24
     b4c:	e3 2d       	mov	r30, r3
     b4e:	e4 60       	ori	r30, 0x04	; 4
     b50:	3e 2e       	mov	r3, r30
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <vfprintf+0xe6>
     b54:	f3 2d       	mov	r31, r3
     b56:	f8 60       	ori	r31, 0x08	; 8
     b58:	1d c0       	rjmp	.+58     	; 0xb94 <vfprintf+0xd2>
     b5a:	37 fc       	sbrc	r3, 7
     b5c:	2d c0       	rjmp	.+90     	; 0xbb8 <vfprintf+0xf6>
     b5e:	20 ed       	ldi	r18, 0xD0	; 208
     b60:	28 0f       	add	r18, r24
     b62:	2a 30       	cpi	r18, 0x0A	; 10
     b64:	40 f0       	brcs	.+16     	; 0xb76 <vfprintf+0xb4>
     b66:	8e 32       	cpi	r24, 0x2E	; 46
     b68:	b9 f4       	brne	.+46     	; 0xb98 <vfprintf+0xd6>
     b6a:	36 fc       	sbrc	r3, 6
     b6c:	81 c1       	rjmp	.+770    	; 0xe70 <vfprintf+0x3ae>
     b6e:	23 2d       	mov	r18, r3
     b70:	20 64       	ori	r18, 0x40	; 64
     b72:	32 2e       	mov	r3, r18
     b74:	19 c0       	rjmp	.+50     	; 0xba8 <vfprintf+0xe6>
     b76:	36 fe       	sbrs	r3, 6
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0xc4>
     b7a:	8a e0       	ldi	r24, 0x0A	; 10
     b7c:	98 9e       	mul	r9, r24
     b7e:	20 0d       	add	r18, r0
     b80:	11 24       	eor	r1, r1
     b82:	92 2e       	mov	r9, r18
     b84:	11 c0       	rjmp	.+34     	; 0xba8 <vfprintf+0xe6>
     b86:	ea e0       	ldi	r30, 0x0A	; 10
     b88:	2e 9e       	mul	r2, r30
     b8a:	20 0d       	add	r18, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	22 2e       	mov	r2, r18
     b90:	f3 2d       	mov	r31, r3
     b92:	f0 62       	ori	r31, 0x20	; 32
     b94:	3f 2e       	mov	r3, r31
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <vfprintf+0xe6>
     b98:	8c 36       	cpi	r24, 0x6C	; 108
     b9a:	21 f4       	brne	.+8      	; 0xba4 <vfprintf+0xe2>
     b9c:	83 2d       	mov	r24, r3
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	38 2e       	mov	r3, r24
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0xe6>
     ba4:	88 36       	cpi	r24, 0x68	; 104
     ba6:	41 f4       	brne	.+16     	; 0xbb8 <vfprintf+0xf6>
     ba8:	f7 01       	movw	r30, r14
     baa:	93 fd       	sbrc	r25, 3
     bac:	85 91       	lpm	r24, Z+
     bae:	93 ff       	sbrs	r25, 3
     bb0:	81 91       	ld	r24, Z+
     bb2:	7f 01       	movw	r14, r30
     bb4:	81 11       	cpse	r24, r1
     bb6:	b3 cf       	rjmp	.-154    	; 0xb1e <vfprintf+0x5c>
     bb8:	98 2f       	mov	r25, r24
     bba:	9f 7d       	andi	r25, 0xDF	; 223
     bbc:	95 54       	subi	r25, 0x45	; 69
     bbe:	93 30       	cpi	r25, 0x03	; 3
     bc0:	28 f4       	brcc	.+10     	; 0xbcc <vfprintf+0x10a>
     bc2:	0c 5f       	subi	r16, 0xFC	; 252
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	9f e3       	ldi	r25, 0x3F	; 63
     bc8:	99 83       	std	Y+1, r25	; 0x01
     bca:	0d c0       	rjmp	.+26     	; 0xbe6 <vfprintf+0x124>
     bcc:	83 36       	cpi	r24, 0x63	; 99
     bce:	31 f0       	breq	.+12     	; 0xbdc <vfprintf+0x11a>
     bd0:	83 37       	cpi	r24, 0x73	; 115
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <vfprintf+0x12e>
     bd4:	83 35       	cpi	r24, 0x53	; 83
     bd6:	09 f0       	breq	.+2      	; 0xbda <vfprintf+0x118>
     bd8:	59 c0       	rjmp	.+178    	; 0xc8c <vfprintf+0x1ca>
     bda:	21 c0       	rjmp	.+66     	; 0xc1e <vfprintf+0x15c>
     bdc:	f8 01       	movw	r30, r16
     bde:	80 81       	ld	r24, Z
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	0e 5f       	subi	r16, 0xFE	; 254
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	88 24       	eor	r8, r8
     be8:	83 94       	inc	r8
     bea:	91 2c       	mov	r9, r1
     bec:	53 01       	movw	r10, r6
     bee:	13 c0       	rjmp	.+38     	; 0xc16 <vfprintf+0x154>
     bf0:	28 01       	movw	r4, r16
     bf2:	f2 e0       	ldi	r31, 0x02	; 2
     bf4:	4f 0e       	add	r4, r31
     bf6:	51 1c       	adc	r5, r1
     bf8:	f8 01       	movw	r30, r16
     bfa:	a0 80       	ld	r10, Z
     bfc:	b1 80       	ldd	r11, Z+1	; 0x01
     bfe:	36 fe       	sbrs	r3, 6
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <vfprintf+0x146>
     c02:	69 2d       	mov	r22, r9
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x14a>
     c08:	6f ef       	ldi	r22, 0xFF	; 255
     c0a:	7f ef       	ldi	r23, 0xFF	; 255
     c0c:	c5 01       	movw	r24, r10
     c0e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <strnlen>
     c12:	4c 01       	movw	r8, r24
     c14:	82 01       	movw	r16, r4
     c16:	f3 2d       	mov	r31, r3
     c18:	ff 77       	andi	r31, 0x7F	; 127
     c1a:	3f 2e       	mov	r3, r31
     c1c:	16 c0       	rjmp	.+44     	; 0xc4a <vfprintf+0x188>
     c1e:	28 01       	movw	r4, r16
     c20:	22 e0       	ldi	r18, 0x02	; 2
     c22:	42 0e       	add	r4, r18
     c24:	51 1c       	adc	r5, r1
     c26:	f8 01       	movw	r30, r16
     c28:	a0 80       	ld	r10, Z
     c2a:	b1 80       	ldd	r11, Z+1	; 0x01
     c2c:	36 fe       	sbrs	r3, 6
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <vfprintf+0x174>
     c30:	69 2d       	mov	r22, r9
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x178>
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	7f ef       	ldi	r23, 0xFF	; 255
     c3a:	c5 01       	movw	r24, r10
     c3c:	0e 94 42 07 	call	0xe84	; 0xe84 <strnlen_P>
     c40:	4c 01       	movw	r8, r24
     c42:	f3 2d       	mov	r31, r3
     c44:	f0 68       	ori	r31, 0x80	; 128
     c46:	3f 2e       	mov	r3, r31
     c48:	82 01       	movw	r16, r4
     c4a:	33 fc       	sbrc	r3, 3
     c4c:	1b c0       	rjmp	.+54     	; 0xc84 <vfprintf+0x1c2>
     c4e:	82 2d       	mov	r24, r2
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 16       	cp	r8, r24
     c54:	99 06       	cpc	r9, r25
     c56:	b0 f4       	brcc	.+44     	; 0xc84 <vfprintf+0x1c2>
     c58:	b6 01       	movw	r22, r12
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     c62:	2a 94       	dec	r2
     c64:	f4 cf       	rjmp	.-24     	; 0xc4e <vfprintf+0x18c>
     c66:	f5 01       	movw	r30, r10
     c68:	37 fc       	sbrc	r3, 7
     c6a:	85 91       	lpm	r24, Z+
     c6c:	37 fe       	sbrs	r3, 7
     c6e:	81 91       	ld	r24, Z+
     c70:	5f 01       	movw	r10, r30
     c72:	b6 01       	movw	r22, r12
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     c7a:	21 10       	cpse	r2, r1
     c7c:	2a 94       	dec	r2
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	82 1a       	sub	r8, r18
     c82:	91 08       	sbc	r9, r1
     c84:	81 14       	cp	r8, r1
     c86:	91 04       	cpc	r9, r1
     c88:	71 f7       	brne	.-36     	; 0xc66 <vfprintf+0x1a4>
     c8a:	e8 c0       	rjmp	.+464    	; 0xe5c <vfprintf+0x39a>
     c8c:	84 36       	cpi	r24, 0x64	; 100
     c8e:	11 f0       	breq	.+4      	; 0xc94 <vfprintf+0x1d2>
     c90:	89 36       	cpi	r24, 0x69	; 105
     c92:	41 f5       	brne	.+80     	; 0xce4 <vfprintf+0x222>
     c94:	f8 01       	movw	r30, r16
     c96:	37 fe       	sbrs	r3, 7
     c98:	07 c0       	rjmp	.+14     	; 0xca8 <vfprintf+0x1e6>
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	0c 5f       	subi	r16, 0xFC	; 252
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <vfprintf+0x1f6>
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	07 2e       	mov	r0, r23
     cae:	00 0c       	add	r0, r0
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	0e 5f       	subi	r16, 0xFE	; 254
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	f3 2d       	mov	r31, r3
     cba:	ff 76       	andi	r31, 0x6F	; 111
     cbc:	3f 2e       	mov	r3, r31
     cbe:	97 ff       	sbrs	r25, 7
     cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <vfprintf+0x212>
     cc2:	90 95       	com	r25
     cc4:	80 95       	com	r24
     cc6:	70 95       	com	r23
     cc8:	61 95       	neg	r22
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	8f 4f       	sbci	r24, 0xFF	; 255
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	f0 68       	ori	r31, 0x80	; 128
     cd2:	3f 2e       	mov	r3, r31
     cd4:	2a e0       	ldi	r18, 0x0A	; 10
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	a3 01       	movw	r20, r6
     cda:	0e 94 94 07 	call	0xf28	; 0xf28 <__ultoa_invert>
     cde:	88 2e       	mov	r8, r24
     ce0:	86 18       	sub	r8, r6
     ce2:	45 c0       	rjmp	.+138    	; 0xd6e <vfprintf+0x2ac>
     ce4:	85 37       	cpi	r24, 0x75	; 117
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <vfprintf+0x232>
     ce8:	23 2d       	mov	r18, r3
     cea:	2f 7e       	andi	r18, 0xEF	; 239
     cec:	b2 2e       	mov	r11, r18
     cee:	2a e0       	ldi	r18, 0x0A	; 10
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	25 c0       	rjmp	.+74     	; 0xd3e <vfprintf+0x27c>
     cf4:	93 2d       	mov	r25, r3
     cf6:	99 7f       	andi	r25, 0xF9	; 249
     cf8:	b9 2e       	mov	r11, r25
     cfa:	8f 36       	cpi	r24, 0x6F	; 111
     cfc:	c1 f0       	breq	.+48     	; 0xd2e <vfprintf+0x26c>
     cfe:	18 f4       	brcc	.+6      	; 0xd06 <vfprintf+0x244>
     d00:	88 35       	cpi	r24, 0x58	; 88
     d02:	79 f0       	breq	.+30     	; 0xd22 <vfprintf+0x260>
     d04:	b5 c0       	rjmp	.+362    	; 0xe70 <vfprintf+0x3ae>
     d06:	80 37       	cpi	r24, 0x70	; 112
     d08:	19 f0       	breq	.+6      	; 0xd10 <vfprintf+0x24e>
     d0a:	88 37       	cpi	r24, 0x78	; 120
     d0c:	21 f0       	breq	.+8      	; 0xd16 <vfprintf+0x254>
     d0e:	b0 c0       	rjmp	.+352    	; 0xe70 <vfprintf+0x3ae>
     d10:	e9 2f       	mov	r30, r25
     d12:	e0 61       	ori	r30, 0x10	; 16
     d14:	be 2e       	mov	r11, r30
     d16:	b4 fe       	sbrs	r11, 4
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <vfprintf+0x272>
     d1a:	fb 2d       	mov	r31, r11
     d1c:	f4 60       	ori	r31, 0x04	; 4
     d1e:	bf 2e       	mov	r11, r31
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <vfprintf+0x272>
     d22:	34 fe       	sbrs	r3, 4
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <vfprintf+0x278>
     d26:	29 2f       	mov	r18, r25
     d28:	26 60       	ori	r18, 0x06	; 6
     d2a:	b2 2e       	mov	r11, r18
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <vfprintf+0x278>
     d2e:	28 e0       	ldi	r18, 0x08	; 8
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <vfprintf+0x27c>
     d34:	20 e1       	ldi	r18, 0x10	; 16
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x27c>
     d3a:	20 e1       	ldi	r18, 0x10	; 16
     d3c:	32 e0       	ldi	r19, 0x02	; 2
     d3e:	f8 01       	movw	r30, r16
     d40:	b7 fe       	sbrs	r11, 7
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <vfprintf+0x290>
     d44:	60 81       	ld	r22, Z
     d46:	71 81       	ldd	r23, Z+1	; 0x01
     d48:	82 81       	ldd	r24, Z+2	; 0x02
     d4a:	93 81       	ldd	r25, Z+3	; 0x03
     d4c:	0c 5f       	subi	r16, 0xFC	; 252
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x29c>
     d52:	60 81       	ld	r22, Z
     d54:	71 81       	ldd	r23, Z+1	; 0x01
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 5f       	subi	r16, 0xFE	; 254
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	a3 01       	movw	r20, r6
     d60:	0e 94 94 07 	call	0xf28	; 0xf28 <__ultoa_invert>
     d64:	88 2e       	mov	r8, r24
     d66:	86 18       	sub	r8, r6
     d68:	fb 2d       	mov	r31, r11
     d6a:	ff 77       	andi	r31, 0x7F	; 127
     d6c:	3f 2e       	mov	r3, r31
     d6e:	36 fe       	sbrs	r3, 6
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <vfprintf+0x2ca>
     d72:	23 2d       	mov	r18, r3
     d74:	2e 7f       	andi	r18, 0xFE	; 254
     d76:	a2 2e       	mov	r10, r18
     d78:	89 14       	cp	r8, r9
     d7a:	58 f4       	brcc	.+22     	; 0xd92 <vfprintf+0x2d0>
     d7c:	34 fe       	sbrs	r3, 4
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <vfprintf+0x2d4>
     d80:	32 fc       	sbrc	r3, 2
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <vfprintf+0x2d4>
     d84:	83 2d       	mov	r24, r3
     d86:	8e 7e       	andi	r24, 0xEE	; 238
     d88:	a8 2e       	mov	r10, r24
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <vfprintf+0x2d4>
     d8c:	b8 2c       	mov	r11, r8
     d8e:	a3 2c       	mov	r10, r3
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x2d6>
     d92:	b8 2c       	mov	r11, r8
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <vfprintf+0x2d6>
     d96:	b9 2c       	mov	r11, r9
     d98:	a4 fe       	sbrs	r10, 4
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <vfprintf+0x2f8>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e8 0d       	add	r30, r8
     da0:	f1 1d       	adc	r31, r1
     da2:	80 81       	ld	r24, Z
     da4:	80 33       	cpi	r24, 0x30	; 48
     da6:	21 f4       	brne	.+8      	; 0xdb0 <vfprintf+0x2ee>
     da8:	9a 2d       	mov	r25, r10
     daa:	99 7e       	andi	r25, 0xE9	; 233
     dac:	a9 2e       	mov	r10, r25
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <vfprintf+0x300>
     db0:	a2 fe       	sbrs	r10, 2
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <vfprintf+0x2fe>
     db4:	b3 94       	inc	r11
     db6:	b3 94       	inc	r11
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <vfprintf+0x300>
     dba:	8a 2d       	mov	r24, r10
     dbc:	86 78       	andi	r24, 0x86	; 134
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <vfprintf+0x300>
     dc0:	b3 94       	inc	r11
     dc2:	a3 fc       	sbrc	r10, 3
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <vfprintf+0x326>
     dc6:	a0 fe       	sbrs	r10, 0
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <vfprintf+0x314>
     dca:	b2 14       	cp	r11, r2
     dcc:	88 f4       	brcc	.+34     	; 0xdf0 <vfprintf+0x32e>
     dce:	28 0c       	add	r2, r8
     dd0:	92 2c       	mov	r9, r2
     dd2:	9b 18       	sub	r9, r11
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <vfprintf+0x330>
     dd6:	b2 14       	cp	r11, r2
     dd8:	60 f4       	brcc	.+24     	; 0xdf2 <vfprintf+0x330>
     dda:	b6 01       	movw	r22, r12
     ddc:	80 e2       	ldi	r24, 0x20	; 32
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     de4:	b3 94       	inc	r11
     de6:	f7 cf       	rjmp	.-18     	; 0xdd6 <vfprintf+0x314>
     de8:	b2 14       	cp	r11, r2
     dea:	18 f4       	brcc	.+6      	; 0xdf2 <vfprintf+0x330>
     dec:	2b 18       	sub	r2, r11
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x332>
     df0:	98 2c       	mov	r9, r8
     df2:	21 2c       	mov	r2, r1
     df4:	a4 fe       	sbrs	r10, 4
     df6:	10 c0       	rjmp	.+32     	; 0xe18 <vfprintf+0x356>
     df8:	b6 01       	movw	r22, r12
     dfa:	80 e3       	ldi	r24, 0x30	; 48
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     e02:	a2 fe       	sbrs	r10, 2
     e04:	17 c0       	rjmp	.+46     	; 0xe34 <vfprintf+0x372>
     e06:	a1 fc       	sbrc	r10, 1
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x34e>
     e0a:	88 e7       	ldi	r24, 0x78	; 120
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x352>
     e10:	88 e5       	ldi	r24, 0x58	; 88
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	b6 01       	movw	r22, r12
     e16:	0c c0       	rjmp	.+24     	; 0xe30 <vfprintf+0x36e>
     e18:	8a 2d       	mov	r24, r10
     e1a:	86 78       	andi	r24, 0x86	; 134
     e1c:	59 f0       	breq	.+22     	; 0xe34 <vfprintf+0x372>
     e1e:	a1 fe       	sbrs	r10, 1
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x364>
     e22:	8b e2       	ldi	r24, 0x2B	; 43
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <vfprintf+0x366>
     e26:	80 e2       	ldi	r24, 0x20	; 32
     e28:	a7 fc       	sbrc	r10, 7
     e2a:	8d e2       	ldi	r24, 0x2D	; 45
     e2c:	b6 01       	movw	r22, r12
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     e34:	89 14       	cp	r8, r9
     e36:	38 f4       	brcc	.+14     	; 0xe46 <vfprintf+0x384>
     e38:	b6 01       	movw	r22, r12
     e3a:	80 e3       	ldi	r24, 0x30	; 48
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     e42:	9a 94       	dec	r9
     e44:	f7 cf       	rjmp	.-18     	; 0xe34 <vfprintf+0x372>
     e46:	8a 94       	dec	r8
     e48:	f3 01       	movw	r30, r6
     e4a:	e8 0d       	add	r30, r8
     e4c:	f1 1d       	adc	r31, r1
     e4e:	80 81       	ld	r24, Z
     e50:	b6 01       	movw	r22, r12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     e58:	81 10       	cpse	r8, r1
     e5a:	f5 cf       	rjmp	.-22     	; 0xe46 <vfprintf+0x384>
     e5c:	22 20       	and	r2, r2
     e5e:	09 f4       	brne	.+2      	; 0xe62 <vfprintf+0x3a0>
     e60:	42 ce       	rjmp	.-892    	; 0xae6 <vfprintf+0x24>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 58 07 	call	0xeb0	; 0xeb0 <fputc>
     e6c:	2a 94       	dec	r2
     e6e:	f6 cf       	rjmp	.-20     	; 0xe5c <vfprintf+0x39a>
     e70:	f6 01       	movw	r30, r12
     e72:	86 81       	ldd	r24, Z+6	; 0x06
     e74:	97 81       	ldd	r25, Z+7	; 0x07
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <vfprintf+0x3ba>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	2b 96       	adiw	r28, 0x0b	; 11
     e7e:	e2 e1       	ldi	r30, 0x12	; 18
     e80:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__epilogue_restores__>

00000e84 <strnlen_P>:
     e84:	fc 01       	movw	r30, r24
     e86:	05 90       	lpm	r0, Z+
     e88:	61 50       	subi	r22, 0x01	; 1
     e8a:	70 40       	sbci	r23, 0x00	; 0
     e8c:	01 10       	cpse	r0, r1
     e8e:	d8 f7       	brcc	.-10     	; 0xe86 <strnlen_P+0x2>
     e90:	80 95       	com	r24
     e92:	90 95       	com	r25
     e94:	8e 0f       	add	r24, r30
     e96:	9f 1f       	adc	r25, r31
     e98:	08 95       	ret

00000e9a <strnlen>:
     e9a:	fc 01       	movw	r30, r24
     e9c:	61 50       	subi	r22, 0x01	; 1
     e9e:	70 40       	sbci	r23, 0x00	; 0
     ea0:	01 90       	ld	r0, Z+
     ea2:	01 10       	cpse	r0, r1
     ea4:	d8 f7       	brcc	.-10     	; 0xe9c <strnlen+0x2>
     ea6:	80 95       	com	r24
     ea8:	90 95       	com	r25
     eaa:	8e 0f       	add	r24, r30
     eac:	9f 1f       	adc	r25, r31
     eae:	08 95       	ret

00000eb0 <fputc>:
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	fb 01       	movw	r30, r22
     eba:	23 81       	ldd	r18, Z+3	; 0x03
     ebc:	21 fd       	sbrc	r18, 1
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <fputc+0x16>
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	2c c0       	rjmp	.+88     	; 0xf1e <fputc+0x6e>
     ec6:	22 ff       	sbrs	r18, 2
     ec8:	16 c0       	rjmp	.+44     	; 0xef6 <fputc+0x46>
     eca:	46 81       	ldd	r20, Z+6	; 0x06
     ecc:	57 81       	ldd	r21, Z+7	; 0x07
     ece:	24 81       	ldd	r18, Z+4	; 0x04
     ed0:	35 81       	ldd	r19, Z+5	; 0x05
     ed2:	42 17       	cp	r20, r18
     ed4:	53 07       	cpc	r21, r19
     ed6:	44 f4       	brge	.+16     	; 0xee8 <fputc+0x38>
     ed8:	a0 81       	ld	r26, Z
     eda:	b1 81       	ldd	r27, Z+1	; 0x01
     edc:	9d 01       	movw	r18, r26
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	31 83       	std	Z+1, r19	; 0x01
     ee4:	20 83       	st	Z, r18
     ee6:	8c 93       	st	X, r24
     ee8:	26 81       	ldd	r18, Z+6	; 0x06
     eea:	37 81       	ldd	r19, Z+7	; 0x07
     eec:	2f 5f       	subi	r18, 0xFF	; 255
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	37 83       	std	Z+7, r19	; 0x07
     ef2:	26 83       	std	Z+6, r18	; 0x06
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <fputc+0x6e>
     ef6:	8b 01       	movw	r16, r22
     ef8:	ec 01       	movw	r28, r24
     efa:	fb 01       	movw	r30, r22
     efc:	00 84       	ldd	r0, Z+8	; 0x08
     efe:	f1 85       	ldd	r31, Z+9	; 0x09
     f00:	e0 2d       	mov	r30, r0
     f02:	09 95       	icall
     f04:	89 2b       	or	r24, r25
     f06:	e1 f6       	brne	.-72     	; 0xec0 <fputc+0x10>
     f08:	d8 01       	movw	r26, r16
     f0a:	16 96       	adiw	r26, 0x06	; 6
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	17 97       	sbiw	r26, 0x07	; 7
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	17 96       	adiw	r26, 0x07	; 7
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
     f1a:	16 97       	sbiw	r26, 0x06	; 6
     f1c:	ce 01       	movw	r24, r28
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <__ultoa_invert>:
     f28:	fa 01       	movw	r30, r20
     f2a:	aa 27       	eor	r26, r26
     f2c:	28 30       	cpi	r18, 0x08	; 8
     f2e:	51 f1       	breq	.+84     	; 0xf84 <__ultoa_invert+0x5c>
     f30:	20 31       	cpi	r18, 0x10	; 16
     f32:	81 f1       	breq	.+96     	; 0xf94 <__ultoa_invert+0x6c>
     f34:	e8 94       	clt
     f36:	6f 93       	push	r22
     f38:	6e 7f       	andi	r22, 0xFE	; 254
     f3a:	6e 5f       	subi	r22, 0xFE	; 254
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	af 4f       	sbci	r26, 0xFF	; 255
     f44:	b1 e0       	ldi	r27, 0x01	; 1
     f46:	3e d0       	rcall	.+124    	; 0xfc4 <__ultoa_invert+0x9c>
     f48:	b4 e0       	ldi	r27, 0x04	; 4
     f4a:	3c d0       	rcall	.+120    	; 0xfc4 <__ultoa_invert+0x9c>
     f4c:	67 0f       	add	r22, r23
     f4e:	78 1f       	adc	r23, r24
     f50:	89 1f       	adc	r24, r25
     f52:	9a 1f       	adc	r25, r26
     f54:	a1 1d       	adc	r26, r1
     f56:	68 0f       	add	r22, r24
     f58:	79 1f       	adc	r23, r25
     f5a:	8a 1f       	adc	r24, r26
     f5c:	91 1d       	adc	r25, r1
     f5e:	a1 1d       	adc	r26, r1
     f60:	6a 0f       	add	r22, r26
     f62:	71 1d       	adc	r23, r1
     f64:	81 1d       	adc	r24, r1
     f66:	91 1d       	adc	r25, r1
     f68:	a1 1d       	adc	r26, r1
     f6a:	20 d0       	rcall	.+64     	; 0xfac <__ultoa_invert+0x84>
     f6c:	09 f4       	brne	.+2      	; 0xf70 <__ultoa_invert+0x48>
     f6e:	68 94       	set
     f70:	3f 91       	pop	r19
     f72:	2a e0       	ldi	r18, 0x0A	; 10
     f74:	26 9f       	mul	r18, r22
     f76:	11 24       	eor	r1, r1
     f78:	30 19       	sub	r19, r0
     f7a:	30 5d       	subi	r19, 0xD0	; 208
     f7c:	31 93       	st	Z+, r19
     f7e:	de f6       	brtc	.-74     	; 0xf36 <__ultoa_invert+0xe>
     f80:	cf 01       	movw	r24, r30
     f82:	08 95       	ret
     f84:	46 2f       	mov	r20, r22
     f86:	47 70       	andi	r20, 0x07	; 7
     f88:	40 5d       	subi	r20, 0xD0	; 208
     f8a:	41 93       	st	Z+, r20
     f8c:	b3 e0       	ldi	r27, 0x03	; 3
     f8e:	0f d0       	rcall	.+30     	; 0xfae <__ultoa_invert+0x86>
     f90:	c9 f7       	brne	.-14     	; 0xf84 <__ultoa_invert+0x5c>
     f92:	f6 cf       	rjmp	.-20     	; 0xf80 <__ultoa_invert+0x58>
     f94:	46 2f       	mov	r20, r22
     f96:	4f 70       	andi	r20, 0x0F	; 15
     f98:	40 5d       	subi	r20, 0xD0	; 208
     f9a:	4a 33       	cpi	r20, 0x3A	; 58
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <__ultoa_invert+0x7c>
     f9e:	49 5d       	subi	r20, 0xD9	; 217
     fa0:	31 fd       	sbrc	r19, 1
     fa2:	40 52       	subi	r20, 0x20	; 32
     fa4:	41 93       	st	Z+, r20
     fa6:	02 d0       	rcall	.+4      	; 0xfac <__ultoa_invert+0x84>
     fa8:	a9 f7       	brne	.-22     	; 0xf94 <__ultoa_invert+0x6c>
     faa:	ea cf       	rjmp	.-44     	; 0xf80 <__ultoa_invert+0x58>
     fac:	b4 e0       	ldi	r27, 0x04	; 4
     fae:	a6 95       	lsr	r26
     fb0:	97 95       	ror	r25
     fb2:	87 95       	ror	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	ba 95       	dec	r27
     fba:	c9 f7       	brne	.-14     	; 0xfae <__ultoa_invert+0x86>
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	61 05       	cpc	r22, r1
     fc0:	71 05       	cpc	r23, r1
     fc2:	08 95       	ret
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	0a 2e       	mov	r0, r26
     fca:	06 94       	lsr	r0
     fcc:	57 95       	ror	r21
     fce:	47 95       	ror	r20
     fd0:	37 95       	ror	r19
     fd2:	27 95       	ror	r18
     fd4:	ba 95       	dec	r27
     fd6:	c9 f7       	brne	.-14     	; 0xfca <__ultoa_invert+0xa2>
     fd8:	62 0f       	add	r22, r18
     fda:	73 1f       	adc	r23, r19
     fdc:	84 1f       	adc	r24, r20
     fde:	95 1f       	adc	r25, r21
     fe0:	a0 1d       	adc	r26, r0
     fe2:	08 95       	ret

00000fe4 <__prologue_saves__>:
     fe4:	2f 92       	push	r2
     fe6:	3f 92       	push	r3
     fe8:	4f 92       	push	r4
     fea:	5f 92       	push	r5
     fec:	6f 92       	push	r6
     fee:	7f 92       	push	r7
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	ca 1b       	sub	r28, r26
    100e:	db 0b       	sbc	r29, r27
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	09 94       	ijmp

0000101c <__epilogue_restores__>:
    101c:	2a 88       	ldd	r2, Y+18	; 0x12
    101e:	39 88       	ldd	r3, Y+17	; 0x11
    1020:	48 88       	ldd	r4, Y+16	; 0x10
    1022:	5f 84       	ldd	r5, Y+15	; 0x0f
    1024:	6e 84       	ldd	r6, Y+14	; 0x0e
    1026:	7d 84       	ldd	r7, Y+13	; 0x0d
    1028:	8c 84       	ldd	r8, Y+12	; 0x0c
    102a:	9b 84       	ldd	r9, Y+11	; 0x0b
    102c:	aa 84       	ldd	r10, Y+10	; 0x0a
    102e:	b9 84       	ldd	r11, Y+9	; 0x09
    1030:	c8 84       	ldd	r12, Y+8	; 0x08
    1032:	df 80       	ldd	r13, Y+7	; 0x07
    1034:	ee 80       	ldd	r14, Y+6	; 0x06
    1036:	fd 80       	ldd	r15, Y+5	; 0x05
    1038:	0c 81       	ldd	r16, Y+4	; 0x04
    103a:	1b 81       	ldd	r17, Y+3	; 0x03
    103c:	aa 81       	ldd	r26, Y+2	; 0x02
    103e:	b9 81       	ldd	r27, Y+1	; 0x01
    1040:	ce 0f       	add	r28, r30
    1042:	d1 1d       	adc	r29, r1
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	ed 01       	movw	r28, r26
    1050:	08 95       	ret

00001052 <_exit>:
    1052:	f8 94       	cli

00001054 <__stop_program>:
    1054:	ff cf       	rjmp	.-2      	; 0x1054 <__stop_program>
