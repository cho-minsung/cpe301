
2c4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a0  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f5  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_16>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
	DDRB |= (1<<5);		// PB5 set as output
  cc:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1<<5);
  ce:	2d 9a       	sbi	0x05, 5	; 5
	DDRC &= ~(1<<1);	// PC1 set as input
  d0:	39 98       	cbi	0x07, 1	; 7
	PORTC &= (1<<1);	// pull-up
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	82 70       	andi	r24, 0x02	; 2
  d6:	88 b9       	out	0x08, r24	; 8
	
	TCCR0A = 0x00;		// normal mode
  d8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0X05;		// prescaler of 1024
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 = (1<<TOIE0); //timer 0 overflow interrupt
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei(); //interrupt enabled
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x1a>

000000e8 <__vector_16>:
		
	}
}

ISR(TIMER0_OVF_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
		TCNT0 = 0; //reset TCNT
  f2:	16 bc       	out	0x26, r1	; 38
	
		while (1) {
			while (!(PINC & (1<<PINC1)))
			{
				PORTB ^= (1<<5);
  f4:	90 e2       	ldi	r25, 0x20	; 32
  f6:	10 c0       	rjmp	.+32     	; 0x118 <__vector_16+0x30>
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	89 27       	eor	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	2b e7       	ldi	r18, 0x7B	; 123
 100:	30 e0       	ldi	r19, 0x00	; 0
				
				for (int i = 0; i <= 122; i++)
				{
					while (TCNT0 != 255)
 102:	86 b5       	in	r24, 0x26	; 38
 104:	8f 3f       	cpi	r24, 0xFF	; 255
 106:	e9 f7       	brne	.-6      	; 0x102 <__vector_16+0x1a>
					{
						//delay of 2 seconds.
					}
					TCNT0 = 0;
 108:	16 bc       	out	0x26, r1	; 38
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
		while (1) {
			while (!(PINC & (1<<PINC1)))
			{
				PORTB ^= (1<<5);
				
				for (int i = 0; i <= 122; i++)
 10e:	c9 f7       	brne	.-14     	; 0x102 <__vector_16+0x1a>
					{
						//delay of 2 seconds.
					}
					TCNT0 = 0;
				}
				PORTB ^= (1<<5);
 110:	85 b1       	in	r24, 0x05	; 5
 112:	89 27       	eor	r24, r25
 114:	85 b9       	out	0x05, r24	; 5
				TCNT0 = 0;
 116:	16 bc       	out	0x26, r1	; 38
ISR(TIMER0_OVF_vect)
{
		TCNT0 = 0; //reset TCNT
	
		while (1) {
			while (!(PINC & (1<<PINC1)))
 118:	31 99       	sbic	0x06, 1	; 6
 11a:	fe cf       	rjmp	.-4      	; 0x118 <__vector_16+0x30>
 11c:	ed cf       	rjmp	.-38     	; 0xf8 <__vector_16+0x10>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
