
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a4  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e5  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define F_CPU 16000000UL
#include <avr/io.h>

int main()
{
	DDRB |= (1<<3);		// PB3 set as output
  cc:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A = 0x00;		// normal mode
  ce:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0X05;		// set prescaler closer to .75s, which is 1.273s
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	85 bd       	out	0x25, r24	; 37

	while (1) {
		TCNT0 = 0;
  d4:	16 bc       	out	0x26, r1	; 38
  d6:	29 e1       	ldi	r18, 0x19	; 25
  d8:	30 e0       	ldi	r19, 0x00	; 0
		// this for loop is for 40% duty cycle or 0.25s
		for (int i = 0; i <= 24; i++) {
			while (TCNT0 != 255) {}		// this loop runs till TCNT = 255
  da:	86 b5       	in	r24, 0x26	; 38
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	e9 f7       	brne	.-6      	; 0xda <main+0xe>
			TCNT0 = 0;					// reset TCNT
  e0:	16 bc       	out	0x26, r1	; 38
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
	TCCR0B = 0X05;		// set prescaler closer to .75s, which is 1.273s

	while (1) {
		TCNT0 = 0;
		// this for loop is for 40% duty cycle or 0.25s
		for (int i = 0; i <= 24; i++) {
  e6:	c9 f7       	brne	.-14     	; 0xda <main+0xe>
			while (TCNT0 != 255) {}		// this loop runs till TCNT = 255
			TCNT0 = 0;					// reset TCNT
		}
		PORTB &= ~(1<<3);
  e8:	2b 98       	cbi	0x05, 3	; 5
		TCNT0 = 0;						// reset TCNT again
  ea:	16 bc       	out	0x26, r1	; 38
  ec:	25 e1       	ldi	r18, 0x15	; 21
  ee:	30 e0       	ldi	r19, 0x00	; 0
		// this for loop is for 60% duty cycle or 0.375s
		for (int j = 0; j < 21; j++) {
			while (TCNT0 != 255) {}
  f0:	86 b5       	in	r24, 0x26	; 38
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x24>
			TCNT0 = 0;					// reset TCNT
  f6:	16 bc       	out	0x26, r1	; 38
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
			TCNT0 = 0;					// reset TCNT
		}
		PORTB &= ~(1<<3);
		TCNT0 = 0;						// reset TCNT again
		// this for loop is for 60% duty cycle or 0.375s
		for (int j = 0; j < 21; j++) {
  fc:	c9 f7       	brne	.-14     	; 0xf0 <main+0x24>
			while (TCNT0 != 255) {}
			TCNT0 = 0;					// reset TCNT
		}
		PORTB |= (1<<3);
  fe:	2b 9a       	sbi	0x05, 3	; 5
		TCNT0 = 0;						// reset TCNT again
 100:	16 bc       	out	0x26, r1	; 38
	}
 102:	e8 cf       	rjmp	.-48     	; 0xd4 <main+0x8>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
