
2c2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000989  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008da  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define F_CPU 16000000UL
#include <avr/io.h>

int main()
{
	DDRB |= (1<<5);		// PB5 set as output
  cc:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1<<5);
  ce:	2d 9a       	sbi	0x05, 5	; 5
	DDRC &= ~(1<<1);	// PC1 set as input
  d0:	39 98       	cbi	0x07, 1	; 7
	PORTC &= (1<<1);	// pull-up
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	82 70       	andi	r24, 0x02	; 2
  d6:	88 b9       	out	0x08, r24	; 8
	
	TCCR0A = 0x00;		// normal mode
  d8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0X05;		// prescaler of 1024
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //reset TCNT
  de:	16 bc       	out	0x26, r1	; 38
			
	while (1) {
		while (!(PINC & (1<<PINC1)))
		{		
			PORTB ^= (1<<5);
  e0:	90 e2       	ldi	r25, 0x20	; 32
  e2:	10 c0       	rjmp	.+32     	; 0x104 <main+0x38>
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	2b e7       	ldi	r18, 0x7B	; 123
  ec:	30 e0       	ldi	r19, 0x00	; 0
			
			for (int i = 0; i <= 122; i++)
			{
				while (TCNT0 != 255)
  ee:	86 b5       	in	r24, 0x26	; 38
  f0:	8f 3f       	cpi	r24, 0xFF	; 255
  f2:	e9 f7       	brne	.-6      	; 0xee <main+0x22>
				{
					//delay of 2 seconds.
				}
				TCNT0 = 0;
  f4:	16 bc       	out	0x26, r1	; 38
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	31 09       	sbc	r19, r1
	while (1) {
		while (!(PINC & (1<<PINC1)))
		{		
			PORTB ^= (1<<5);
			
			for (int i = 0; i <= 122; i++)
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x22>
				{
					//delay of 2 seconds.
				}
				TCNT0 = 0;
			}
			PORTB ^= (1<<5);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	89 27       	eor	r24, r25
 100:	85 b9       	out	0x05, r24	; 5
			TCNT0 = 0;
 102:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;		// normal mode
	TCCR0B = 0X05;		// prescaler of 1024
	TCNT0 = 0; //reset TCNT
			
	while (1) {
		while (!(PINC & (1<<PINC1)))
 104:	31 99       	sbic	0x06, 1	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x38>
 108:	ed cf       	rjmp	.-38     	; 0xe4 <main+0x18>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
