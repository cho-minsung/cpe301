
2C5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ba  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_14>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
	DDRB |= (1<<3);		// PB3 set as output
  cc:	23 9a       	sbi	0x04, 3	; 4
	
	TCCR0A |= (1<<WGM01); // CTC mode
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00); // set prescaler. 1024
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	85 60       	ori	r24, 0x05	; 5
  d8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); //timer0 Compare enabled
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	OCR0A = 249; //top is set
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	87 bd       	out	0x27, r24	; 39
	sei(); //interrupt enabled
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x1a>

000000e8 <__vector_14>:
		
	}
}

ISR(TIMER0_COMPA_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	TCNT0 = 0;
  f6:	16 bc       	out	0x26, r1	; 38
	TCNT0 = 0;
  f8:	16 bc       	out	0x26, r1	; 38
  fa:	89 e1       	ldi	r24, 0x19	; 25
  fc:	90 e0       	ldi	r25, 0x00	; 0
	// 55% duty cycle, 412.5s
	for (int i = 0; i <= 24; i++)
	{
		while (!(TIFR0 & (1<<OCF0A)))
  fe:	a9 9b       	sbis	0x15, 1	; 21
 100:	fe cf       	rjmp	.-4      	; 0xfe <__vector_14+0x16>
		{
		}
		TCNT0 = 0; // reset TCNT
 102:	16 bc       	out	0x26, r1	; 38
		TIFR0 |= (1<<OCF0A); //clear the flag
 104:	a9 9a       	sbi	0x15, 1	; 21
 106:	01 97       	sbiw	r24, 0x01	; 1
ISR(TIMER0_COMPA_vect)
{
	TCNT0 = 0;
	TCNT0 = 0;
	// 55% duty cycle, 412.5s
	for (int i = 0; i <= 24; i++)
 108:	d1 f7       	brne	.-12     	; 0xfe <__vector_14+0x16>
		{
		}
		TCNT0 = 0; // reset TCNT
		TIFR0 |= (1<<OCF0A); //clear the flag
	}
	PORTB &= ~(1<<3);
 10a:	2b 98       	cbi	0x05, 3	; 5

	TCNT0 = 0;
 10c:	16 bc       	out	0x26, r1	; 38
 10e:	85 e1       	ldi	r24, 0x15	; 21
 110:	90 e0       	ldi	r25, 0x00	; 0
	
	//45% duty cycle, 337.5s
	for (int j = 0; j < 21; j++)
	{
		while (!(TIFR0 & (1<<OCF0A)))
 112:	a9 9b       	sbis	0x15, 1	; 21
 114:	fe cf       	rjmp	.-4      	; 0x112 <__vector_14+0x2a>
		{
		}
		TCNT0 = 0;
 116:	16 bc       	out	0x26, r1	; 38
		TIFR0 |= (1<<OCF0A);
 118:	a9 9a       	sbi	0x15, 1	; 21
 11a:	01 97       	sbiw	r24, 0x01	; 1
	PORTB &= ~(1<<3);

	TCNT0 = 0;
	
	//45% duty cycle, 337.5s
	for (int j = 0; j < 21; j++)
 11c:	d1 f7       	brne	.-12     	; 0x112 <__vector_14+0x2a>
		{
		}
		TCNT0 = 0;
		TIFR0 |= (1<<OCF0A);
	}
	PORTB |= (1<<3);
 11e:	2b 9a       	sbi	0x05, 3	; 5
	TCNT0 = 0;
 120:	16 bc       	out	0x26, r1	; 38
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
