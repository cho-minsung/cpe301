
assignment5_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000005a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4d  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ee  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000373  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e0       	ldi	r30, 0x04	; 4
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 30       	cpi	r26, 0x0E	; 14
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 13 01 	call	0x226	; 0x226 <main>
  ea:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <spi_init>:
	}
}

void spi_init()
{
	SHIFT_REGISTER |= (DATA | LATCH | CLOCK);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	8c 62       	ori	r24, 0x2C	; 44
  f6:	84 b9       	out	0x04, r24	; 4
	SHIFT_PORT &= ~(DATA | LATCH | CLOCK);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	83 7d       	andi	r24, 0xD3	; 211
  fc:	85 b9       	out	0x05, r24	; 5
	SPCR0 = (1<<SPE) | (1<<MSTR);
  fe:	80 e5       	ldi	r24, 0x50	; 80
 100:	8c bd       	out	0x2c, r24	; 44
	SHIFT_PORT &= ~LATCH;
 102:	2a 98       	cbi	0x05, 2	; 5
 104:	08 95       	ret

00000106 <spi_shift>:
}

void spi_shift(uint8_t data1, uint8_t data2)
{
	SPDR0 = data1;
 106:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR0 & (1<<SPIF)));
 108:	0d b4       	in	r0, 0x2d	; 45
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <spi_shift+0x2>
	
	SPDR0 = data2;
 10e:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR0 & (1<<SPIF)));
 110:	0d b4       	in	r0, 0x2d	; 45
 112:	07 fe       	sbrs	r0, 7
 114:	fd cf       	rjmp	.-6      	; 0x110 <spi_shift+0xa>
	
	SHIFT_PORT |= LATCH;
 116:	2a 9a       	sbi	0x05, 2	; 5
	SHIFT_PORT &= ~LATCH;
 118:	2a 98       	cbi	0x05, 2	; 5
 11a:	08 95       	ret

0000011c <display>:
}

void display(int num)
{
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	7c 01       	movw	r14, r24
	int ones = (num % 10);		//the first digit
 12e:	2a e0       	ldi	r18, 0x0A	; 10
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divmodhi4>
 138:	8c 01       	movw	r16, r24
	int tens = (num / 10) % 10;	//the second digit
 13a:	cb 01       	movw	r24, r22
 13c:	b9 01       	movw	r22, r18
 13e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divmodhi4>
 142:	c1 e0       	ldi	r28, 0x01	; 1
 144:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 2; i++)
	{
		if (i == 0 && num >= 10)
			spi_shift(SEGMENT_MAP[tens],SEGMENT_SELECT[2]);
		else
			spi_shift(SEGMENT_MAP[ones],SEGMENT_SELECT[3]);
 146:	00 50       	subi	r16, 0x00	; 0
 148:	1f 4f       	sbci	r17, 0xFF	; 255
	int tens = (num / 10) % 10;	//the second digit

	for (int i = 0; i < 2; i++)
	{
		if (i == 0 && num >= 10)
			spi_shift(SEGMENT_MAP[tens],SEGMENT_SELECT[2]);
 14a:	9c 01       	movw	r18, r24
 14c:	20 50       	subi	r18, 0x00	; 0
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	69 01       	movw	r12, r18
 152:	01 c0       	rjmp	.+2      	; 0x156 <display+0x3a>
 154:	21 96       	adiw	r28, 0x01	; 1
	int ones = (num % 10);		//the first digit
	int tens = (num / 10) % 10;	//the second digit

	for (int i = 0; i < 2; i++)
	{
		if (i == 0 && num >= 10)
 156:	c1 30       	cpi	r28, 0x01	; 1
 158:	d1 05       	cpc	r29, r1
 15a:	51 f4       	brne	.+20     	; 0x170 <display+0x54>
 15c:	3a e0       	ldi	r19, 0x0A	; 10
 15e:	e3 16       	cp	r14, r19
 160:	f1 04       	cpc	r15, r1
 162:	34 f0       	brlt	.+12     	; 0x170 <display+0x54>
			spi_shift(SEGMENT_MAP[tens],SEGMENT_SELECT[2]);
 164:	64 ef       	ldi	r22, 0xF4	; 244
 166:	f6 01       	movw	r30, r12
 168:	80 81       	ld	r24, Z
 16a:	0e 94 83 00 	call	0x106	; 0x106 <spi_shift>
 16e:	f2 cf       	rjmp	.-28     	; 0x154 <display+0x38>
		else
			spi_shift(SEGMENT_MAP[ones],SEGMENT_SELECT[3]);
 170:	68 ef       	ldi	r22, 0xF8	; 248
 172:	f8 01       	movw	r30, r16
 174:	80 81       	ld	r24, Z
 176:	0e 94 83 00 	call	0x106	; 0x106 <spi_shift>
void display(int num)
{
	int ones = (num % 10);		//the first digit
	int tens = (num / 10) % 10;	//the second digit

	for (int i = 0; i < 2; i++)
 17a:	c2 30       	cpi	r28, 0x02	; 2
 17c:	d1 05       	cpc	r29, r1
 17e:	54 f3       	brlt	.-44     	; 0x154 <display+0x38>
		if (i == 0 && num >= 10)
			spi_shift(SEGMENT_MAP[tens],SEGMENT_SELECT[2]);
		else
			spi_shift(SEGMENT_MAP[ones],SEGMENT_SELECT[3]);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	08 95       	ret

00000192 <adc_init>:

void adc_init()
{
	ADMUX |= (1 << REFS0) | (0 << MUX3) | (1 << MUX2) | (0 << MUX1) | (0 << MUX0);
 192:	ec e7       	ldi	r30, 0x7C	; 124
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	84 64       	ori	r24, 0x44	; 68
 19a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (0 << ADSC) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	87 68       	ori	r24, 0x87	; 135
 1a4:	80 83       	st	Z, r24
	
	DDRC = 0;
 1a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 1a8:	18 b8       	out	0x08, r1	; 8
 1aa:	08 95       	ret

000001ac <read_adc>:
}

void read_adc()
{
	temp = 0;
 1ac:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1b0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 1b4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end+0x2>
 1b8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x3>
	ADCSRA |= (1 << ADSC);
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
 1c6:	80 81       	ld	r24, Z
 1c8:	86 fd       	sbrc	r24, 6
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <read_adc+0x1a>
	temp = ADC;
 1cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__floatunsisf>
 1dc:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 1e0:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 1e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 1e8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
	temp = (temp / 1024) * 500;
 1ec:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 1f0:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 1f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 1f8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5a e3       	ldi	r21, 0x3A	; 58
 204:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	4a ef       	ldi	r20, 0xFA	; 250
 20e:	53 e4       	ldi	r21, 0x43	; 67
 210:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
 214:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 218:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 21c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 220:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 224:	08 95       	ret

00000226 <main>:

volatile float temp = 0;

int main(void)
{
	spi_init();
 226:	0e 94 79 00 	call	0xf2	; 0xf2 <spi_init>
	adc_init();
 22a:	0e 94 c9 00 	call	0x192	; 0x192 <adc_init>
	
	while (1){
		read_adc();
 22e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <read_adc>
		display((int)temp); // display the temperature on the 7-segment displays
 232:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 236:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 23a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 23e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 242:	0e 94 27 01 	call	0x24e	; 0x24e <__fixsfsi>
 246:	cb 01       	movw	r24, r22
 248:	0e 94 8e 00 	call	0x11c	; 0x11c <display>
 24c:	f0 cf       	rjmp	.-32     	; 0x22e <main+0x8>

0000024e <__fixsfsi>:
 24e:	0e 94 2e 01 	call	0x25c	; 0x25c <__fixunssfsi>
 252:	68 94       	set
 254:	b1 11       	cpse	r27, r1
 256:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_szero>
 25a:	08 95       	ret

0000025c <__fixunssfsi>:
 25c:	0e 94 a2 01 	call	0x344	; 0x344 <__fp_splitA>
 260:	88 f0       	brcs	.+34     	; 0x284 <__fixunssfsi+0x28>
 262:	9f 57       	subi	r25, 0x7F	; 127
 264:	98 f0       	brcs	.+38     	; 0x28c <__fixunssfsi+0x30>
 266:	b9 2f       	mov	r27, r25
 268:	99 27       	eor	r25, r25
 26a:	b7 51       	subi	r27, 0x17	; 23
 26c:	b0 f0       	brcs	.+44     	; 0x29a <__fixunssfsi+0x3e>
 26e:	e1 f0       	breq	.+56     	; 0x2a8 <__fixunssfsi+0x4c>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	1a f0       	brmi	.+6      	; 0x280 <__fixunssfsi+0x24>
 27a:	ba 95       	dec	r27
 27c:	c9 f7       	brne	.-14     	; 0x270 <__fixunssfsi+0x14>
 27e:	14 c0       	rjmp	.+40     	; 0x2a8 <__fixunssfsi+0x4c>
 280:	b1 30       	cpi	r27, 0x01	; 1
 282:	91 f0       	breq	.+36     	; 0x2a8 <__fixunssfsi+0x4c>
 284:	0e 94 bc 01 	call	0x378	; 0x378 <__fp_zero>
 288:	b1 e0       	ldi	r27, 0x01	; 1
 28a:	08 95       	ret
 28c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_zero>
 290:	67 2f       	mov	r22, r23
 292:	78 2f       	mov	r23, r24
 294:	88 27       	eor	r24, r24
 296:	b8 5f       	subi	r27, 0xF8	; 248
 298:	39 f0       	breq	.+14     	; 0x2a8 <__fixunssfsi+0x4c>
 29a:	b9 3f       	cpi	r27, 0xF9	; 249
 29c:	cc f3       	brlt	.-14     	; 0x290 <__fixunssfsi+0x34>
 29e:	86 95       	lsr	r24
 2a0:	77 95       	ror	r23
 2a2:	67 95       	ror	r22
 2a4:	b3 95       	inc	r27
 2a6:	d9 f7       	brne	.-10     	; 0x29e <__fixunssfsi+0x42>
 2a8:	3e f4       	brtc	.+14     	; 0x2b8 <__fixunssfsi+0x5c>
 2aa:	90 95       	com	r25
 2ac:	80 95       	com	r24
 2ae:	70 95       	com	r23
 2b0:	61 95       	neg	r22
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	8f 4f       	sbci	r24, 0xFF	; 255
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	08 95       	ret

000002ba <__floatunsisf>:
 2ba:	e8 94       	clt
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <__floatsisf+0x12>

000002be <__floatsisf>:
 2be:	97 fb       	bst	r25, 7
 2c0:	3e f4       	brtc	.+14     	; 0x2d0 <__floatsisf+0x12>
 2c2:	90 95       	com	r25
 2c4:	80 95       	com	r24
 2c6:	70 95       	com	r23
 2c8:	61 95       	neg	r22
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	8f 4f       	sbci	r24, 0xFF	; 255
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	99 23       	and	r25, r25
 2d2:	a9 f0       	breq	.+42     	; 0x2fe <__floatsisf+0x40>
 2d4:	f9 2f       	mov	r31, r25
 2d6:	96 e9       	ldi	r25, 0x96	; 150
 2d8:	bb 27       	eor	r27, r27
 2da:	93 95       	inc	r25
 2dc:	f6 95       	lsr	r31
 2de:	87 95       	ror	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b7 95       	ror	r27
 2e6:	f1 11       	cpse	r31, r1
 2e8:	f8 cf       	rjmp	.-16     	; 0x2da <__floatsisf+0x1c>
 2ea:	fa f4       	brpl	.+62     	; 0x32a <__floatsisf+0x6c>
 2ec:	bb 0f       	add	r27, r27
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <__floatsisf+0x36>
 2f0:	60 ff       	sbrs	r22, 0
 2f2:	1b c0       	rjmp	.+54     	; 0x32a <__floatsisf+0x6c>
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	16 c0       	rjmp	.+44     	; 0x32a <__floatsisf+0x6c>
 2fe:	88 23       	and	r24, r24
 300:	11 f0       	breq	.+4      	; 0x306 <__floatsisf+0x48>
 302:	96 e9       	ldi	r25, 0x96	; 150
 304:	11 c0       	rjmp	.+34     	; 0x328 <__floatsisf+0x6a>
 306:	77 23       	and	r23, r23
 308:	21 f0       	breq	.+8      	; 0x312 <__floatsisf+0x54>
 30a:	9e e8       	ldi	r25, 0x8E	; 142
 30c:	87 2f       	mov	r24, r23
 30e:	76 2f       	mov	r23, r22
 310:	05 c0       	rjmp	.+10     	; 0x31c <__floatsisf+0x5e>
 312:	66 23       	and	r22, r22
 314:	71 f0       	breq	.+28     	; 0x332 <__floatsisf+0x74>
 316:	96 e8       	ldi	r25, 0x86	; 134
 318:	86 2f       	mov	r24, r22
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	2a f0       	brmi	.+10     	; 0x32a <__floatsisf+0x6c>
 320:	9a 95       	dec	r25
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	da f7       	brpl	.-10     	; 0x320 <__floatsisf+0x62>
 32a:	88 0f       	add	r24, r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	97 f9       	bld	r25, 7
 332:	08 95       	ret

00000334 <__fp_split3>:
 334:	57 fd       	sbrc	r21, 7
 336:	90 58       	subi	r25, 0x80	; 128
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	59 f0       	breq	.+22     	; 0x354 <__fp_splitA+0x10>
 33e:	5f 3f       	cpi	r21, 0xFF	; 255
 340:	71 f0       	breq	.+28     	; 0x35e <__fp_splitA+0x1a>
 342:	47 95       	ror	r20

00000344 <__fp_splitA>:
 344:	88 0f       	add	r24, r24
 346:	97 fb       	bst	r25, 7
 348:	99 1f       	adc	r25, r25
 34a:	61 f0       	breq	.+24     	; 0x364 <__fp_splitA+0x20>
 34c:	9f 3f       	cpi	r25, 0xFF	; 255
 34e:	79 f0       	breq	.+30     	; 0x36e <__fp_splitA+0x2a>
 350:	87 95       	ror	r24
 352:	08 95       	ret
 354:	12 16       	cp	r1, r18
 356:	13 06       	cpc	r1, r19
 358:	14 06       	cpc	r1, r20
 35a:	55 1f       	adc	r21, r21
 35c:	f2 cf       	rjmp	.-28     	; 0x342 <__fp_split3+0xe>
 35e:	46 95       	lsr	r20
 360:	f1 df       	rcall	.-30     	; 0x344 <__fp_splitA>
 362:	08 c0       	rjmp	.+16     	; 0x374 <__fp_splitA+0x30>
 364:	16 16       	cp	r1, r22
 366:	17 06       	cpc	r1, r23
 368:	18 06       	cpc	r1, r24
 36a:	99 1f       	adc	r25, r25
 36c:	f1 cf       	rjmp	.-30     	; 0x350 <__fp_splitA+0xc>
 36e:	86 95       	lsr	r24
 370:	71 05       	cpc	r23, r1
 372:	61 05       	cpc	r22, r1
 374:	08 94       	sec
 376:	08 95       	ret

00000378 <__fp_zero>:
 378:	e8 94       	clt

0000037a <__fp_szero>:
 37a:	bb 27       	eor	r27, r27
 37c:	66 27       	eor	r22, r22
 37e:	77 27       	eor	r23, r23
 380:	cb 01       	movw	r24, r22
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret

00000386 <__mulsf3>:
 386:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__mulsf3x>
 38a:	0c 94 47 02 	jmp	0x48e	; 0x48e <__fp_round>
 38e:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscA>
 392:	38 f0       	brcs	.+14     	; 0x3a2 <__mulsf3+0x1c>
 394:	0e 94 40 02 	call	0x480	; 0x480 <__fp_pscB>
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__mulsf3+0x1c>
 39a:	95 23       	and	r25, r21
 39c:	11 f0       	breq	.+4      	; 0x3a2 <__mulsf3+0x1c>
 39e:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 3a2:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_nan>
 3a6:	11 24       	eor	r1, r1
 3a8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_szero>

000003ac <__mulsf3x>:
 3ac:	0e 94 9a 01 	call	0x334	; 0x334 <__fp_split3>
 3b0:	70 f3       	brcs	.-36     	; 0x38e <__mulsf3+0x8>

000003b2 <__mulsf3_pse>:
 3b2:	95 9f       	mul	r25, r21
 3b4:	c1 f3       	breq	.-16     	; 0x3a6 <__mulsf3+0x20>
 3b6:	95 0f       	add	r25, r21
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	55 1f       	adc	r21, r21
 3bc:	62 9f       	mul	r22, r18
 3be:	f0 01       	movw	r30, r0
 3c0:	72 9f       	mul	r23, r18
 3c2:	bb 27       	eor	r27, r27
 3c4:	f0 0d       	add	r31, r0
 3c6:	b1 1d       	adc	r27, r1
 3c8:	63 9f       	mul	r22, r19
 3ca:	aa 27       	eor	r26, r26
 3cc:	f0 0d       	add	r31, r0
 3ce:	b1 1d       	adc	r27, r1
 3d0:	aa 1f       	adc	r26, r26
 3d2:	64 9f       	mul	r22, r20
 3d4:	66 27       	eor	r22, r22
 3d6:	b0 0d       	add	r27, r0
 3d8:	a1 1d       	adc	r26, r1
 3da:	66 1f       	adc	r22, r22
 3dc:	82 9f       	mul	r24, r18
 3de:	22 27       	eor	r18, r18
 3e0:	b0 0d       	add	r27, r0
 3e2:	a1 1d       	adc	r26, r1
 3e4:	62 1f       	adc	r22, r18
 3e6:	73 9f       	mul	r23, r19
 3e8:	b0 0d       	add	r27, r0
 3ea:	a1 1d       	adc	r26, r1
 3ec:	62 1f       	adc	r22, r18
 3ee:	83 9f       	mul	r24, r19
 3f0:	a0 0d       	add	r26, r0
 3f2:	61 1d       	adc	r22, r1
 3f4:	22 1f       	adc	r18, r18
 3f6:	74 9f       	mul	r23, r20
 3f8:	33 27       	eor	r19, r19
 3fa:	a0 0d       	add	r26, r0
 3fc:	61 1d       	adc	r22, r1
 3fe:	23 1f       	adc	r18, r19
 400:	84 9f       	mul	r24, r20
 402:	60 0d       	add	r22, r0
 404:	21 1d       	adc	r18, r1
 406:	82 2f       	mov	r24, r18
 408:	76 2f       	mov	r23, r22
 40a:	6a 2f       	mov	r22, r26
 40c:	11 24       	eor	r1, r1
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	50 40       	sbci	r21, 0x00	; 0
 412:	9a f0       	brmi	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 414:	f1 f0       	breq	.+60     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 416:	88 23       	and	r24, r24
 418:	4a f0       	brmi	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	bb 1f       	adc	r27, r27
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	91 50       	subi	r25, 0x01	; 1
 428:	50 40       	sbci	r21, 0x00	; 0
 42a:	a9 f7       	brne	.-22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 42c:	9e 3f       	cpi	r25, 0xFE	; 254
 42e:	51 05       	cpc	r21, r1
 430:	80 f0       	brcs	.+32     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 432:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 436:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_szero>
 43a:	5f 3f       	cpi	r21, 0xFF	; 255
 43c:	e4 f3       	brlt	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	98 3e       	cpi	r25, 0xE8	; 232
 440:	d4 f3       	brlt	.-12     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 442:	86 95       	lsr	r24
 444:	77 95       	ror	r23
 446:	67 95       	ror	r22
 448:	b7 95       	ror	r27
 44a:	f7 95       	ror	r31
 44c:	e7 95       	ror	r30
 44e:	9f 5f       	subi	r25, 0xFF	; 255
 450:	c1 f7       	brne	.-16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 452:	fe 2b       	or	r31, r30
 454:	88 0f       	add	r24, r24
 456:	91 1d       	adc	r25, r1
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	97 f9       	bld	r25, 7
 45e:	08 95       	ret

00000460 <__fp_inf>:
 460:	97 f9       	bld	r25, 7
 462:	9f 67       	ori	r25, 0x7F	; 127
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	08 95       	ret

0000046c <__fp_nan>:
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	08 95       	ret

00000472 <__fp_pscA>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	09 06       	cpc	r0, r25
 47e:	08 95       	ret

00000480 <__fp_pscB>:
 480:	00 24       	eor	r0, r0
 482:	0a 94       	dec	r0
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	14 06       	cpc	r1, r20
 48a:	05 06       	cpc	r0, r21
 48c:	08 95       	ret

0000048e <__fp_round>:
 48e:	09 2e       	mov	r0, r25
 490:	03 94       	inc	r0
 492:	00 0c       	add	r0, r0
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0xc>
 496:	88 23       	and	r24, r24
 498:	52 f0       	brmi	.+20     	; 0x4ae <__fp_round+0x20>
 49a:	bb 0f       	add	r27, r27
 49c:	40 f4       	brcc	.+16     	; 0x4ae <__fp_round+0x20>
 49e:	bf 2b       	or	r27, r31
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__fp_round+0x18>
 4a2:	60 ff       	sbrs	r22, 0
 4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__fp_round+0x20>
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__divmodhi4>:
 4b0:	97 fb       	bst	r25, 7
 4b2:	07 2e       	mov	r0, r23
 4b4:	16 f4       	brtc	.+4      	; 0x4ba <__divmodhi4+0xa>
 4b6:	00 94       	com	r0
 4b8:	07 d0       	rcall	.+14     	; 0x4c8 <__divmodhi4_neg1>
 4ba:	77 fd       	sbrc	r23, 7
 4bc:	09 d0       	rcall	.+18     	; 0x4d0 <__divmodhi4_neg2>
 4be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 4c2:	07 fc       	sbrc	r0, 7
 4c4:	05 d0       	rcall	.+10     	; 0x4d0 <__divmodhi4_neg2>
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__divmodhi4_exit>

000004c8 <__divmodhi4_neg1>:
 4c8:	90 95       	com	r25
 4ca:	81 95       	neg	r24
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	08 95       	ret

000004d0 <__divmodhi4_neg2>:
 4d0:	70 95       	com	r23
 4d2:	61 95       	neg	r22
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255

000004d6 <__divmodhi4_exit>:
 4d6:	08 95       	ret

000004d8 <__udivmodhi4>:
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	51 e1       	ldi	r21, 0x11	; 17
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__udivmodhi4_ep>

000004e0 <__udivmodhi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	a6 17       	cp	r26, r22
 4e6:	b7 07       	cpc	r27, r23
 4e8:	10 f0       	brcs	.+4      	; 0x4ee <__udivmodhi4_ep>
 4ea:	a6 1b       	sub	r26, r22
 4ec:	b7 0b       	sbc	r27, r23

000004ee <__udivmodhi4_ep>:
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	5a 95       	dec	r21
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <__udivmodhi4_loop>
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
