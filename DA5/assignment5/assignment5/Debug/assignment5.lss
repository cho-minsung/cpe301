
assignment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004fa  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6d  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e3  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019a  00000000  00000000  00002463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000025fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 30       	cpi	r26, 0x0E	; 14
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  ea:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
	}
}

void adc_init()
{
	ADMUX |= (1 << REFS0) | (0 << MUX3) | (1 << MUX2) | (0 << MUX1) | (0 << MUX0);
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 64       	ori	r24, 0x44	; 68
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (0 << ADSC) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	87 68       	ori	r24, 0x87	; 135
 104:	80 83       	st	Z, r24
	
	DDRC = 0;
 106:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 108:	18 b8       	out	0x08, r1	; 8
 10a:	08 95       	ret

0000010c <read_adc>:
}

void read_adc()
{
	temp = 0;
 10c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 110:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 114:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end+0x2>
 118:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x3>
	ADCSRA |= (1 << ADSC);
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
 126:	80 81       	ld	r24, Z
 128:	86 fd       	sbrc	r24, 6
 12a:	fd cf       	rjmp	.-6      	; 0x126 <read_adc+0x1a>
	temp = ADC;
 12c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 130:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__floatunsisf>
 13c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 140:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 144:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 148:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
	temp = (temp / 1024) * 500;
 14c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 150:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 154:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 158:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	5a e3       	ldi	r21, 0x3A	; 58
 164:	0e 94 be 01 	call	0x37c	; 0x37c <__mulsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	4a ef       	ldi	r20, 0xFA	; 250
 16e:	53 e4       	ldi	r21, 0x43	; 67
 170:	0e 94 be 01 	call	0x37c	; 0x37c <__mulsf3>
 174:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 178:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 17c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 180:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 184:	08 95       	ret

00000186 <shift_out_init>:
}

void shift_out_init(void)
{
	DDRB|=(1 << DATA);
 186:	20 9a       	sbi	0x04, 0	; 4
	DDRD|=(1 << CLOCK) | (1 << LATCH);
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	80 69       	ori	r24, 0x90	; 144
 18c:	8a b9       	out	0x0a, r24	; 10
 18e:	08 95       	ret

00000190 <shift_out>:
}

void shift_out(uint8_t indata)
{
 190:	27 e0       	ldi	r18, 0x07	; 7
 192:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++)
	{
		if (0 == (indata & _BV(7 - i)))
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 2e       	mov	r0, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <shift_out+0x10>
 19c:	55 95       	asr	r21
 19e:	47 95       	ror	r20
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <shift_out+0xc>
 1a4:	40 fd       	sbrc	r20, 0
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <shift_out+0x1e>
			PORTB &= (0 << DATA);
 1a8:	45 b1       	in	r20, 0x05	; 5
 1aa:	15 b8       	out	0x05, r1	; 5
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <shift_out+0x20>
		else
			PORTB |= (1 << DATA);
 1ae:	28 9a       	sbi	0x05, 0	; 5

		PORTD |= (1 << CLOCK);
 1b0:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= (0 << CLOCK);
 1b2:	4b b1       	in	r20, 0x0b	; 11
 1b4:	1b b8       	out	0x0b, r1	; 11
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	31 09       	sbc	r19, r1
 1ba:	68 f7       	brcc	.-38     	; 0x196 <shift_out+0x6>
	}
}
 1bc:	08 95       	ret

000001be <convert>:

void convert(int num)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
	int ones = (num % 10);		//the first digit
	int tens = (num / 10) % 10;	//the second digit
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 1ce:	cb 01       	movw	r24, r22
 1d0:	b9 01       	movw	r22, r18
 1d2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>

	for (int i = 1; i < 3; i++)
	{
		if (i == 1 && num >= 10)
 1d6:	ca 30       	cpi	r28, 0x0A	; 10
 1d8:	d1 05       	cpc	r29, r1
 1da:	64 f0       	brlt	.+24     	; 0x1f4 <convert+0x36>
		{
			PORTD &= (0 << LATCH);
 1dc:	2b b1       	in	r18, 0x0b	; 11
 1de:	1b b8       	out	0x0b, r1	; 11
			shift_out(SEGMENT_MAP[tens]);
 1e0:	fc 01       	movw	r30, r24
 1e2:	e0 50       	subi	r30, 0x00	; 0
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	80 81       	ld	r24, Z
 1e8:	0e 94 c8 00 	call	0x190	; 0x190 <shift_out>
			shift_out(SEGMENT_SELECT[2]);
 1ec:	84 ef       	ldi	r24, 0xF4	; 244
 1ee:	0e 94 c8 00 	call	0x190	; 0x190 <shift_out>
			PORTD |= (1 << LATCH);
 1f2:	5c 9a       	sbi	0x0b, 4	; 11
		}
		if (i == 2)
		{
			PORTD &= (0<<LATCH);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	1b b8       	out	0x0b, r1	; 11
			shift_out(SEGMENT_MAP[ones]);
 1f8:	ce 01       	movw	r24, r28
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 202:	fc 01       	movw	r30, r24
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	0e 94 c8 00 	call	0x190	; 0x190 <shift_out>
			shift_out(SEGMENT_SELECT[3]);
 20e:	88 ef       	ldi	r24, 0xF8	; 248
 210:	0e 94 c8 00 	call	0x190	; 0x190 <shift_out>
			PORTD |= (1 << LATCH);
 214:	5c 9a       	sbi	0x0b, 4	; 11
		}
	}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <main>:
volatile float temp = 0;

int main(void)
{
	//the setups
	adc_init();
 21c:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	shift_out_init();
 220:	0e 94 c3 00 	call	0x186	; 0x186 <shift_out_init>
	
	while (1)
	{
		read_adc();
 224:	0e 94 86 00 	call	0x10c	; 0x10c <read_adc>
		convert((int)temp);	//changes the temperature into integer
 228:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 22c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 230:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 234:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 238:	0e 94 22 01 	call	0x244	; 0x244 <__fixsfsi>
 23c:	cb 01       	movw	r24, r22
 23e:	0e 94 df 00 	call	0x1be	; 0x1be <convert>
 242:	f0 cf       	rjmp	.-32     	; 0x224 <main+0x8>

00000244 <__fixsfsi>:
 244:	0e 94 29 01 	call	0x252	; 0x252 <__fixunssfsi>
 248:	68 94       	set
 24a:	b1 11       	cpse	r27, r1
 24c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_szero>
 250:	08 95       	ret

00000252 <__fixunssfsi>:
 252:	0e 94 9d 01 	call	0x33a	; 0x33a <__fp_splitA>
 256:	88 f0       	brcs	.+34     	; 0x27a <__fixunssfsi+0x28>
 258:	9f 57       	subi	r25, 0x7F	; 127
 25a:	98 f0       	brcs	.+38     	; 0x282 <__fixunssfsi+0x30>
 25c:	b9 2f       	mov	r27, r25
 25e:	99 27       	eor	r25, r25
 260:	b7 51       	subi	r27, 0x17	; 23
 262:	b0 f0       	brcs	.+44     	; 0x290 <__fixunssfsi+0x3e>
 264:	e1 f0       	breq	.+56     	; 0x29e <__fixunssfsi+0x4c>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a f0       	brmi	.+6      	; 0x276 <__fixunssfsi+0x24>
 270:	ba 95       	dec	r27
 272:	c9 f7       	brne	.-14     	; 0x266 <__fixunssfsi+0x14>
 274:	14 c0       	rjmp	.+40     	; 0x29e <__fixunssfsi+0x4c>
 276:	b1 30       	cpi	r27, 0x01	; 1
 278:	91 f0       	breq	.+36     	; 0x29e <__fixunssfsi+0x4c>
 27a:	0e 94 b7 01 	call	0x36e	; 0x36e <__fp_zero>
 27e:	b1 e0       	ldi	r27, 0x01	; 1
 280:	08 95       	ret
 282:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_zero>
 286:	67 2f       	mov	r22, r23
 288:	78 2f       	mov	r23, r24
 28a:	88 27       	eor	r24, r24
 28c:	b8 5f       	subi	r27, 0xF8	; 248
 28e:	39 f0       	breq	.+14     	; 0x29e <__fixunssfsi+0x4c>
 290:	b9 3f       	cpi	r27, 0xF9	; 249
 292:	cc f3       	brlt	.-14     	; 0x286 <__fixunssfsi+0x34>
 294:	86 95       	lsr	r24
 296:	77 95       	ror	r23
 298:	67 95       	ror	r22
 29a:	b3 95       	inc	r27
 29c:	d9 f7       	brne	.-10     	; 0x294 <__fixunssfsi+0x42>
 29e:	3e f4       	brtc	.+14     	; 0x2ae <__fixunssfsi+0x5c>
 2a0:	90 95       	com	r25
 2a2:	80 95       	com	r24
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <__floatunsisf>:
 2b0:	e8 94       	clt
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__floatsisf+0x12>

000002b4 <__floatsisf>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__floatsisf+0x12>
 2b8:	90 95       	com	r25
 2ba:	80 95       	com	r24
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	8f 4f       	sbci	r24, 0xFF	; 255
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	99 23       	and	r25, r25
 2c8:	a9 f0       	breq	.+42     	; 0x2f4 <__floatsisf+0x40>
 2ca:	f9 2f       	mov	r31, r25
 2cc:	96 e9       	ldi	r25, 0x96	; 150
 2ce:	bb 27       	eor	r27, r27
 2d0:	93 95       	inc	r25
 2d2:	f6 95       	lsr	r31
 2d4:	87 95       	ror	r24
 2d6:	77 95       	ror	r23
 2d8:	67 95       	ror	r22
 2da:	b7 95       	ror	r27
 2dc:	f1 11       	cpse	r31, r1
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <__floatsisf+0x1c>
 2e0:	fa f4       	brpl	.+62     	; 0x320 <__floatsisf+0x6c>
 2e2:	bb 0f       	add	r27, r27
 2e4:	11 f4       	brne	.+4      	; 0x2ea <__floatsisf+0x36>
 2e6:	60 ff       	sbrs	r22, 0
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <__floatsisf+0x6c>
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	8f 4f       	sbci	r24, 0xFF	; 255
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <__floatsisf+0x6c>
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <__floatsisf+0x48>
 2f8:	96 e9       	ldi	r25, 0x96	; 150
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <__floatsisf+0x6a>
 2fc:	77 23       	and	r23, r23
 2fe:	21 f0       	breq	.+8      	; 0x308 <__floatsisf+0x54>
 300:	9e e8       	ldi	r25, 0x8E	; 142
 302:	87 2f       	mov	r24, r23
 304:	76 2f       	mov	r23, r22
 306:	05 c0       	rjmp	.+10     	; 0x312 <__floatsisf+0x5e>
 308:	66 23       	and	r22, r22
 30a:	71 f0       	breq	.+28     	; 0x328 <__floatsisf+0x74>
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	86 2f       	mov	r24, r22
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	2a f0       	brmi	.+10     	; 0x320 <__floatsisf+0x6c>
 316:	9a 95       	dec	r25
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	da f7       	brpl	.-10     	; 0x316 <__floatsisf+0x62>
 320:	88 0f       	add	r24, r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__fp_split3>:
 32a:	57 fd       	sbrc	r21, 7
 32c:	90 58       	subi	r25, 0x80	; 128
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	59 f0       	breq	.+22     	; 0x34a <__fp_splitA+0x10>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	71 f0       	breq	.+28     	; 0x354 <__fp_splitA+0x1a>
 338:	47 95       	ror	r20

0000033a <__fp_splitA>:
 33a:	88 0f       	add	r24, r24
 33c:	97 fb       	bst	r25, 7
 33e:	99 1f       	adc	r25, r25
 340:	61 f0       	breq	.+24     	; 0x35a <__fp_splitA+0x20>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	79 f0       	breq	.+30     	; 0x364 <__fp_splitA+0x2a>
 346:	87 95       	ror	r24
 348:	08 95       	ret
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	14 06       	cpc	r1, r20
 350:	55 1f       	adc	r21, r21
 352:	f2 cf       	rjmp	.-28     	; 0x338 <__fp_split3+0xe>
 354:	46 95       	lsr	r20
 356:	f1 df       	rcall	.-30     	; 0x33a <__fp_splitA>
 358:	08 c0       	rjmp	.+16     	; 0x36a <__fp_splitA+0x30>
 35a:	16 16       	cp	r1, r22
 35c:	17 06       	cpc	r1, r23
 35e:	18 06       	cpc	r1, r24
 360:	99 1f       	adc	r25, r25
 362:	f1 cf       	rjmp	.-30     	; 0x346 <__fp_splitA+0xc>
 364:	86 95       	lsr	r24
 366:	71 05       	cpc	r23, r1
 368:	61 05       	cpc	r22, r1
 36a:	08 94       	sec
 36c:	08 95       	ret

0000036e <__fp_zero>:
 36e:	e8 94       	clt

00000370 <__fp_szero>:
 370:	bb 27       	eor	r27, r27
 372:	66 27       	eor	r22, r22
 374:	77 27       	eor	r23, r23
 376:	cb 01       	movw	r24, r22
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__mulsf3>:
 37c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3x>
 380:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_round>
 384:	0e 94 34 02 	call	0x468	; 0x468 <__fp_pscA>
 388:	38 f0       	brcs	.+14     	; 0x398 <__mulsf3+0x1c>
 38a:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscB>
 38e:	20 f0       	brcs	.+8      	; 0x398 <__mulsf3+0x1c>
 390:	95 23       	and	r25, r21
 392:	11 f0       	breq	.+4      	; 0x398 <__mulsf3+0x1c>
 394:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 398:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_nan>
 39c:	11 24       	eor	r1, r1
 39e:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_szero>

000003a2 <__mulsf3x>:
 3a2:	0e 94 95 01 	call	0x32a	; 0x32a <__fp_split3>
 3a6:	70 f3       	brcs	.-36     	; 0x384 <__mulsf3+0x8>

000003a8 <__mulsf3_pse>:
 3a8:	95 9f       	mul	r25, r21
 3aa:	c1 f3       	breq	.-16     	; 0x39c <__mulsf3+0x20>
 3ac:	95 0f       	add	r25, r21
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	55 1f       	adc	r21, r21
 3b2:	62 9f       	mul	r22, r18
 3b4:	f0 01       	movw	r30, r0
 3b6:	72 9f       	mul	r23, r18
 3b8:	bb 27       	eor	r27, r27
 3ba:	f0 0d       	add	r31, r0
 3bc:	b1 1d       	adc	r27, r1
 3be:	63 9f       	mul	r22, r19
 3c0:	aa 27       	eor	r26, r26
 3c2:	f0 0d       	add	r31, r0
 3c4:	b1 1d       	adc	r27, r1
 3c6:	aa 1f       	adc	r26, r26
 3c8:	64 9f       	mul	r22, r20
 3ca:	66 27       	eor	r22, r22
 3cc:	b0 0d       	add	r27, r0
 3ce:	a1 1d       	adc	r26, r1
 3d0:	66 1f       	adc	r22, r22
 3d2:	82 9f       	mul	r24, r18
 3d4:	22 27       	eor	r18, r18
 3d6:	b0 0d       	add	r27, r0
 3d8:	a1 1d       	adc	r26, r1
 3da:	62 1f       	adc	r22, r18
 3dc:	73 9f       	mul	r23, r19
 3de:	b0 0d       	add	r27, r0
 3e0:	a1 1d       	adc	r26, r1
 3e2:	62 1f       	adc	r22, r18
 3e4:	83 9f       	mul	r24, r19
 3e6:	a0 0d       	add	r26, r0
 3e8:	61 1d       	adc	r22, r1
 3ea:	22 1f       	adc	r18, r18
 3ec:	74 9f       	mul	r23, r20
 3ee:	33 27       	eor	r19, r19
 3f0:	a0 0d       	add	r26, r0
 3f2:	61 1d       	adc	r22, r1
 3f4:	23 1f       	adc	r18, r19
 3f6:	84 9f       	mul	r24, r20
 3f8:	60 0d       	add	r22, r0
 3fa:	21 1d       	adc	r18, r1
 3fc:	82 2f       	mov	r24, r18
 3fe:	76 2f       	mov	r23, r22
 400:	6a 2f       	mov	r22, r26
 402:	11 24       	eor	r1, r1
 404:	9f 57       	subi	r25, 0x7F	; 127
 406:	50 40       	sbci	r21, 0x00	; 0
 408:	9a f0       	brmi	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40a:	f1 f0       	breq	.+60     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 40c:	88 23       	and	r24, r24
 40e:	4a f0       	brmi	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	bb 1f       	adc	r27, r27
 416:	66 1f       	adc	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 422:	9e 3f       	cpi	r25, 0xFE	; 254
 424:	51 05       	cpc	r21, r1
 426:	80 f0       	brcs	.+32     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 428:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 42c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_szero>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	e4 f3       	brlt	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	98 3e       	cpi	r25, 0xE8	; 232
 436:	d4 f3       	brlt	.-12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b7 95       	ror	r27
 440:	f7 95       	ror	r31
 442:	e7 95       	ror	r30
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	c1 f7       	brne	.-16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 448:	fe 2b       	or	r31, r30
 44a:	88 0f       	add	r24, r24
 44c:	91 1d       	adc	r25, r1
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret

00000456 <__fp_inf>:
 456:	97 f9       	bld	r25, 7
 458:	9f 67       	ori	r25, 0x7F	; 127
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	08 95       	ret

00000462 <__fp_nan>:
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	08 95       	ret

00000468 <__fp_pscA>:
 468:	00 24       	eor	r0, r0
 46a:	0a 94       	dec	r0
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	18 06       	cpc	r1, r24
 472:	09 06       	cpc	r0, r25
 474:	08 95       	ret

00000476 <__fp_pscB>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	12 16       	cp	r1, r18
 47c:	13 06       	cpc	r1, r19
 47e:	14 06       	cpc	r1, r20
 480:	05 06       	cpc	r0, r21
 482:	08 95       	ret

00000484 <__fp_round>:
 484:	09 2e       	mov	r0, r25
 486:	03 94       	inc	r0
 488:	00 0c       	add	r0, r0
 48a:	11 f4       	brne	.+4      	; 0x490 <__fp_round+0xc>
 48c:	88 23       	and	r24, r24
 48e:	52 f0       	brmi	.+20     	; 0x4a4 <__fp_round+0x20>
 490:	bb 0f       	add	r27, r27
 492:	40 f4       	brcc	.+16     	; 0x4a4 <__fp_round+0x20>
 494:	bf 2b       	or	r27, r31
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0x18>
 498:	60 ff       	sbrs	r22, 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__fp_round+0x20>
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <__divmodhi4>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	07 2e       	mov	r0, r23
 4aa:	16 f4       	brtc	.+4      	; 0x4b0 <__divmodhi4+0xa>
 4ac:	00 94       	com	r0
 4ae:	07 d0       	rcall	.+14     	; 0x4be <__divmodhi4_neg1>
 4b0:	77 fd       	sbrc	r23, 7
 4b2:	09 d0       	rcall	.+18     	; 0x4c6 <__divmodhi4_neg2>
 4b4:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodhi4>
 4b8:	07 fc       	sbrc	r0, 7
 4ba:	05 d0       	rcall	.+10     	; 0x4c6 <__divmodhi4_neg2>
 4bc:	3e f4       	brtc	.+14     	; 0x4cc <__divmodhi4_exit>

000004be <__divmodhi4_neg1>:
 4be:	90 95       	com	r25
 4c0:	81 95       	neg	r24
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__divmodhi4_neg2>:
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255

000004cc <__divmodhi4_exit>:
 4cc:	08 95       	ret

000004ce <__udivmodhi4>:
 4ce:	aa 1b       	sub	r26, r26
 4d0:	bb 1b       	sub	r27, r27
 4d2:	51 e1       	ldi	r21, 0x11	; 17
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <__udivmodhi4_ep>

000004d6 <__udivmodhi4_loop>:
 4d6:	aa 1f       	adc	r26, r26
 4d8:	bb 1f       	adc	r27, r27
 4da:	a6 17       	cp	r26, r22
 4dc:	b7 07       	cpc	r27, r23
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <__udivmodhi4_ep>
 4e0:	a6 1b       	sub	r26, r22
 4e2:	b7 0b       	sbc	r27, r23

000004e4 <__udivmodhi4_ep>:
 4e4:	88 1f       	adc	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	5a 95       	dec	r21
 4ea:	a9 f7       	brne	.-22     	; 0x4d6 <__udivmodhi4_loop>
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	bc 01       	movw	r22, r24
 4f2:	cd 01       	movw	r24, r26
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
