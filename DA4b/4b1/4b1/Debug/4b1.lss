
4b1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d1  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  000010bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d1  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  d4:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <read_poten>:
	}

}

void read_poten(void)
{
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	unsigned char i=4;
	poten = 0;
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
  fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
  fe:	68 94       	set
 100:	bb 24       	eor	r11, r11
 102:	b2 f8       	bld	r11, 2
	while(i--) {
		ADCSRA |= (1<<ADSC);
 104:	ca e7       	ldi	r28, 0x7A	; 122
 106:	d0 e0       	ldi	r29, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		poten += ADC;
 108:	08 e7       	ldi	r16, 0x78	; 120
 10a:	10 e0       	ldi	r17, 0x00	; 0
void read_poten(void)
{
	unsigned char i=4;
	poten = 0;
	while(i--) {
		ADCSRA |= (1<<ADSC);
 10c:	88 81       	ld	r24, Y
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	88 83       	st	Y, r24
		while(ADCSRA & (1<<ADSC));
 112:	88 81       	ld	r24, Y
 114:	86 fd       	sbrc	r24, 6
 116:	fd cf       	rjmp	.-6      	; 0x112 <read_poten+0x36>
		poten += ADC;
 118:	f8 01       	movw	r30, r16
 11a:	60 81       	ld	r22, Z
 11c:	71 81       	ldd	r23, Z+1	; 0x01
 11e:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <_edata>
 122:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <_edata+0x1>
 126:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_edata+0x2>
 12a:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_edata+0x3>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 ca 01 	call	0x394	; 0x394 <__floatunsisf>
 136:	a7 01       	movw	r20, r14
 138:	96 01       	movw	r18, r12
 13a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__addsf3>
 13e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 142:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 14a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 14e:	ba 94       	dec	r11

void read_poten(void)
{
	unsigned char i=4;
	poten = 0;
	while(i--) {
 150:	b1 10       	cpse	r11, r1
 152:	dc cf       	rjmp	.-72     	; 0x10c <read_poten+0x30>
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		poten += ADC;
	}
	poten = poten/4;
 154:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 158:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e8       	ldi	r20, 0x80	; 128
 16a:	5e e3       	ldi	r21, 0x3E	; 62
 16c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__mulsf3>
 170:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 174:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	bf 90       	pop	r11
 192:	08 95       	ret

00000194 <main>:

void read_poten(void);

int main(void)
{
	DDRD = 0x0F;
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	8a b9       	out	0x0a, r24	; 10
	DDRC |= ~(1<<0);
 198:	87 b1       	in	r24, 0x07	; 7
 19a:	8e 6f       	ori	r24, 0xFE	; 254
 19c:	87 b9       	out	0x07, r24	; 7
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 19e:	e1 e8       	ldi	r30, 0x81	; 129
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8b 60       	ori	r24, 0x0B	; 11
 1a6:	80 83       	st	Z, r24
	/*PD0-PD3 are outputs
	PC0 is an input
	CTC, prescaler = 64
	*/
	
		ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		AVcc - external cap at AREF
		right adjust result
		Analog channel selection bits
		ADC5*/
		
		ADCSRA=(1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
 1ae:	85 e8       	ldi	r24, 0x85	; 133
 1b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		else if (poten >= 512)
		OCR1A = 2499;
		else if (poten >= 256)
		OCR1A = 4999;
		else if (poten >= 0)
		OCR1A = 7499;
 1b4:	c8 e8       	ldi	r28, 0x88	; 136
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	0f 2e       	mov	r0, r31
 1ba:	fb e4       	ldi	r31, 0x4B	; 75
 1bc:	af 2e       	mov	r10, r31
 1be:	fd e1       	ldi	r31, 0x1D	; 29
 1c0:	bf 2e       	mov	r11, r31
 1c2:	f0 2d       	mov	r31, r0
		if (poten >= 768)
		OCR1A = 9999;
		else if (poten >= 512)
		OCR1A = 2499;
		else if (poten >= 256)
		OCR1A = 4999;
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f7 e8       	ldi	r31, 0x87	; 135
 1c8:	cf 2e       	mov	r12, r31
 1ca:	f3 e1       	ldi	r31, 0x13	; 19
 1cc:	df 2e       	mov	r13, r31
 1ce:	f0 2d       	mov	r31, r0

		
		if (poten >= 768)
		OCR1A = 9999;
		else if (poten >= 512)
		OCR1A = 2499;
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f3 ec       	ldi	r31, 0xC3	; 195
 1d4:	ef 2e       	mov	r14, r31
 1d6:	f9 e0       	ldi	r31, 0x09	; 9
 1d8:	ff 2e       	mov	r15, r31
 1da:	f0 2d       	mov	r31, r0
		//Timer Count = (30ms/(1/(16000000/64)))- 1 = 7499
		//Timer Count = (40ms/(1/(16000000/64)))- 1 = 9999

		
		if (poten >= 768)
		OCR1A = 9999;
 1dc:	0f e0       	ldi	r16, 0x0F	; 15
 1de:	17 e2       	ldi	r17, 0x27	; 39
		else if (poten >= 256)
		OCR1A = 4999;
		else if (poten >= 0)
		OCR1A = 7499;
		
		PORTD = 0x0A;					// Clockwise spin
 1e0:	0f 2e       	mov	r0, r31
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	6f 2e       	mov	r6, r31
 1e6:	f0 2d       	mov	r31, r0
		TIFR1 |= (1 << OCF1A);			//the flag bit is cleared
		while(!(TIFR1 & (1 << OCF1A)));	//loop till the flag is set
		PORTB = 0x06;
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f6 e0       	ldi	r31, 0x06	; 6
 1ec:	7f 2e       	mov	r7, r31
 1ee:	f0 2d       	mov	r31, r0
		TIFR1 |= (1 << OCF1A);
		while(!(TIFR1 & (1 << OCF1A)));
		PORTD = 0x05;
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f5 e0       	ldi	r31, 0x05	; 5
 1f4:	8f 2e       	mov	r8, r31
 1f6:	f0 2d       	mov	r31, r0
		TIFR1 |= (1 << OCF1A);
		while(!(TIFR1 & (1 << OCF1A)));
		PORTD = 0x09;
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f9 e0       	ldi	r31, 0x09	; 9
 1fc:	9f 2e       	mov	r9, r31
 1fe:	f0 2d       	mov	r31, r0
		ADCSRA=(1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
		// ADCSRA setup
	
	while (1)
	{
		read_poten();
 200:	0e 94 6e 00 	call	0xdc	; 0xdc <read_poten>
		//Timer Count = (20ms/(1/(16000000/64)))- 1 = 4999
		//Timer Count = (30ms/(1/(16000000/64)))- 1 = 7499
		//Timer Count = (40ms/(1/(16000000/64)))- 1 = 9999

		
		if (poten >= 768)
 204:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 208:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e4       	ldi	r20, 0x40	; 64
 21a:	54 e4       	ldi	r21, 0x44	; 68
 21c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__gesf2>
 220:	88 23       	and	r24, r24
 222:	1c f0       	brlt	.+6      	; 0x22a <main+0x96>
		OCR1A = 9999;
 224:	19 83       	std	Y+1, r17	; 0x01
 226:	08 83       	st	Y, r16
 228:	37 c0       	rjmp	.+110    	; 0x298 <main+0x104>
		else if (poten >= 512)
 22a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 22e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 232:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 236:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	54 e4       	ldi	r21, 0x44	; 68
 242:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__gesf2>
 246:	88 23       	and	r24, r24
 248:	1c f0       	brlt	.+6      	; 0x250 <main+0xbc>
		OCR1A = 2499;
 24a:	f9 82       	std	Y+1, r15	; 0x01
 24c:	e8 82       	st	Y, r14
 24e:	24 c0       	rjmp	.+72     	; 0x298 <main+0x104>
		else if (poten >= 256)
 250:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 254:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 25c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	53 e4       	ldi	r21, 0x43	; 67
 268:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__gesf2>
 26c:	88 23       	and	r24, r24
 26e:	1c f0       	brlt	.+6      	; 0x276 <main+0xe2>
		OCR1A = 4999;
 270:	d9 82       	std	Y+1, r13	; 0x01
 272:	c8 82       	st	Y, r12
 274:	11 c0       	rjmp	.+34     	; 0x298 <main+0x104>
		else if (poten >= 0)
 276:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 27a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 282:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	a9 01       	movw	r20, r18
 28c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__gesf2>
 290:	88 23       	and	r24, r24
 292:	14 f0       	brlt	.+4      	; 0x298 <main+0x104>
		OCR1A = 7499;
 294:	b9 82       	std	Y+1, r11	; 0x01
 296:	a8 82       	st	Y, r10
		
		PORTD = 0x0A;					// Clockwise spin
 298:	6b b8       	out	0x0b, r6	; 11
		TIFR1 |= (1 << OCF1A);			//the flag bit is cleared
 29a:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));	//loop till the flag is set
 29c:	b1 9b       	sbis	0x16, 1	; 22
 29e:	fe cf       	rjmp	.-4      	; 0x29c <main+0x108>
		PORTB = 0x06;
 2a0:	75 b8       	out	0x05, r7	; 5
		TIFR1 |= (1 << OCF1A);
 2a2:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 2a4:	b1 9b       	sbis	0x16, 1	; 22
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <main+0x110>
		PORTD = 0x05;
 2a8:	8b b8       	out	0x0b, r8	; 11
		TIFR1 |= (1 << OCF1A);
 2aa:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 2ac:	b1 9b       	sbis	0x16, 1	; 22
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <main+0x118>
		PORTD = 0x09;
 2b0:	9b b8       	out	0x0b, r9	; 11
		TIFR1 |= (1 << OCF1A);
 2b2:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 2b4:	b1 9b       	sbis	0x16, 1	; 22
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <main+0x120>
 2b8:	a3 cf       	rjmp	.-186    	; 0x200 <main+0x6c>

000002ba <__subsf3>:
 2ba:	50 58       	subi	r21, 0x80	; 128

000002bc <__addsf3>:
 2bc:	bb 27       	eor	r27, r27
 2be:	aa 27       	eor	r26, r26
 2c0:	0e 94 75 01 	call	0x2ea	; 0x2ea <__addsf3x>
 2c4:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_round>
 2c8:	0e 94 10 02 	call	0x420	; 0x420 <__fp_pscA>
 2cc:	38 f0       	brcs	.+14     	; 0x2dc <__addsf3+0x20>
 2ce:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscB>
 2d2:	20 f0       	brcs	.+8      	; 0x2dc <__addsf3+0x20>
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <__addsf3+0x28>
 2d6:	9f 3f       	cpi	r25, 0xFF	; 255
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <__addsf3+0x24>
 2da:	26 f4       	brtc	.+8      	; 0x2e4 <__addsf3+0x28>
 2dc:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_nan>
 2e0:	0e f4       	brtc	.+2      	; 0x2e4 <__addsf3+0x28>
 2e2:	e0 95       	com	r30
 2e4:	e7 fb       	bst	r30, 7
 2e6:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>

000002ea <__addsf3x>:
 2ea:	e9 2f       	mov	r30, r25
 2ec:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_split3>
 2f0:	58 f3       	brcs	.-42     	; 0x2c8 <__addsf3+0xc>
 2f2:	ba 17       	cp	r27, r26
 2f4:	62 07       	cpc	r22, r18
 2f6:	73 07       	cpc	r23, r19
 2f8:	84 07       	cpc	r24, r20
 2fa:	95 07       	cpc	r25, r21
 2fc:	20 f0       	brcs	.+8      	; 0x306 <__addsf3x+0x1c>
 2fe:	79 f4       	brne	.+30     	; 0x31e <__addsf3x+0x34>
 300:	a6 f5       	brtc	.+104    	; 0x36a <__addsf3x+0x80>
 302:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_zero>
 306:	0e f4       	brtc	.+2      	; 0x30a <__addsf3x+0x20>
 308:	e0 95       	com	r30
 30a:	0b 2e       	mov	r0, r27
 30c:	ba 2f       	mov	r27, r26
 30e:	a0 2d       	mov	r26, r0
 310:	0b 01       	movw	r0, r22
 312:	b9 01       	movw	r22, r18
 314:	90 01       	movw	r18, r0
 316:	0c 01       	movw	r0, r24
 318:	ca 01       	movw	r24, r20
 31a:	a0 01       	movw	r20, r0
 31c:	11 24       	eor	r1, r1
 31e:	ff 27       	eor	r31, r31
 320:	59 1b       	sub	r21, r25
 322:	99 f0       	breq	.+38     	; 0x34a <__addsf3x+0x60>
 324:	59 3f       	cpi	r21, 0xF9	; 249
 326:	50 f4       	brcc	.+20     	; 0x33c <__addsf3x+0x52>
 328:	50 3e       	cpi	r21, 0xE0	; 224
 32a:	68 f1       	brcs	.+90     	; 0x386 <__addsf3x+0x9c>
 32c:	1a 16       	cp	r1, r26
 32e:	f0 40       	sbci	r31, 0x00	; 0
 330:	a2 2f       	mov	r26, r18
 332:	23 2f       	mov	r18, r19
 334:	34 2f       	mov	r19, r20
 336:	44 27       	eor	r20, r20
 338:	58 5f       	subi	r21, 0xF8	; 248
 33a:	f3 cf       	rjmp	.-26     	; 0x322 <__addsf3x+0x38>
 33c:	46 95       	lsr	r20
 33e:	37 95       	ror	r19
 340:	27 95       	ror	r18
 342:	a7 95       	ror	r26
 344:	f0 40       	sbci	r31, 0x00	; 0
 346:	53 95       	inc	r21
 348:	c9 f7       	brne	.-14     	; 0x33c <__addsf3x+0x52>
 34a:	7e f4       	brtc	.+30     	; 0x36a <__addsf3x+0x80>
 34c:	1f 16       	cp	r1, r31
 34e:	ba 0b       	sbc	r27, r26
 350:	62 0b       	sbc	r22, r18
 352:	73 0b       	sbc	r23, r19
 354:	84 0b       	sbc	r24, r20
 356:	ba f0       	brmi	.+46     	; 0x386 <__addsf3x+0x9c>
 358:	91 50       	subi	r25, 0x01	; 1
 35a:	a1 f0       	breq	.+40     	; 0x384 <__addsf3x+0x9a>
 35c:	ff 0f       	add	r31, r31
 35e:	bb 1f       	adc	r27, r27
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	c2 f7       	brpl	.-16     	; 0x358 <__addsf3x+0x6e>
 368:	0e c0       	rjmp	.+28     	; 0x386 <__addsf3x+0x9c>
 36a:	ba 0f       	add	r27, r26
 36c:	62 1f       	adc	r22, r18
 36e:	73 1f       	adc	r23, r19
 370:	84 1f       	adc	r24, r20
 372:	48 f4       	brcc	.+18     	; 0x386 <__addsf3x+0x9c>
 374:	87 95       	ror	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f7 95       	ror	r31
 37e:	9e 3f       	cpi	r25, 0xFE	; 254
 380:	08 f0       	brcs	.+2      	; 0x384 <__addsf3x+0x9a>
 382:	b0 cf       	rjmp	.-160    	; 0x2e4 <__addsf3+0x28>
 384:	93 95       	inc	r25
 386:	88 0f       	add	r24, r24
 388:	08 f0       	brcs	.+2      	; 0x38c <__addsf3x+0xa2>
 38a:	99 27       	eor	r25, r25
 38c:	ee 0f       	add	r30, r30
 38e:	97 95       	ror	r25
 390:	87 95       	ror	r24
 392:	08 95       	ret

00000394 <__floatunsisf>:
 394:	e8 94       	clt
 396:	09 c0       	rjmp	.+18     	; 0x3aa <__floatsisf+0x12>

00000398 <__floatsisf>:
 398:	97 fb       	bst	r25, 7
 39a:	3e f4       	brtc	.+14     	; 0x3aa <__floatsisf+0x12>
 39c:	90 95       	com	r25
 39e:	80 95       	com	r24
 3a0:	70 95       	com	r23
 3a2:	61 95       	neg	r22
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	8f 4f       	sbci	r24, 0xFF	; 255
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	99 23       	and	r25, r25
 3ac:	a9 f0       	breq	.+42     	; 0x3d8 <__floatsisf+0x40>
 3ae:	f9 2f       	mov	r31, r25
 3b0:	96 e9       	ldi	r25, 0x96	; 150
 3b2:	bb 27       	eor	r27, r27
 3b4:	93 95       	inc	r25
 3b6:	f6 95       	lsr	r31
 3b8:	87 95       	ror	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f1 11       	cpse	r31, r1
 3c2:	f8 cf       	rjmp	.-16     	; 0x3b4 <__floatsisf+0x1c>
 3c4:	fa f4       	brpl	.+62     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3c6:	bb 0f       	add	r27, r27
 3c8:	11 f4       	brne	.+4      	; 0x3ce <__floatsisf+0x36>
 3ca:	60 ff       	sbrs	r22, 0
 3cc:	1b c0       	rjmp	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	8f 4f       	sbci	r24, 0xFF	; 255
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d8:	88 23       	and	r24, r24
 3da:	11 f0       	breq	.+4      	; 0x3e0 <__floatsisf+0x48>
 3dc:	96 e9       	ldi	r25, 0x96	; 150
 3de:	11 c0       	rjmp	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e0:	77 23       	and	r23, r23
 3e2:	21 f0       	breq	.+8      	; 0x3ec <__floatsisf+0x54>
 3e4:	9e e8       	ldi	r25, 0x8E	; 142
 3e6:	87 2f       	mov	r24, r23
 3e8:	76 2f       	mov	r23, r22
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <__floatsisf+0x5e>
 3ec:	66 23       	and	r22, r22
 3ee:	71 f0       	breq	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f0:	96 e8       	ldi	r25, 0x86	; 134
 3f2:	86 2f       	mov	r24, r22
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	2a f0       	brmi	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fa:	9a 95       	dec	r25
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	da f7       	brpl	.-10     	; 0x3fa <__floatsisf+0x62>
 404:	88 0f       	add	r24, r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	97 f9       	bld	r25, 7
 40c:	08 95       	ret

0000040e <__fp_inf>:
 40e:	97 f9       	bld	r25, 7
 410:	9f 67       	ori	r25, 0x7F	; 127
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	08 95       	ret

0000041a <__fp_nan>:
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	80 ec       	ldi	r24, 0xC0	; 192
 41e:	08 95       	ret

00000420 <__fp_pscA>:
 420:	00 24       	eor	r0, r0
 422:	0a 94       	dec	r0
 424:	16 16       	cp	r1, r22
 426:	17 06       	cpc	r1, r23
 428:	18 06       	cpc	r1, r24
 42a:	09 06       	cpc	r0, r25
 42c:	08 95       	ret

0000042e <__fp_pscB>:
 42e:	00 24       	eor	r0, r0
 430:	0a 94       	dec	r0
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	05 06       	cpc	r0, r21
 43a:	08 95       	ret

0000043c <__fp_round>:
 43c:	09 2e       	mov	r0, r25
 43e:	03 94       	inc	r0
 440:	00 0c       	add	r0, r0
 442:	11 f4       	brne	.+4      	; 0x448 <__fp_round+0xc>
 444:	88 23       	and	r24, r24
 446:	52 f0       	brmi	.+20     	; 0x45c <__fp_round+0x20>
 448:	bb 0f       	add	r27, r27
 44a:	40 f4       	brcc	.+16     	; 0x45c <__fp_round+0x20>
 44c:	bf 2b       	or	r27, r31
 44e:	11 f4       	brne	.+4      	; 0x454 <__fp_round+0x18>
 450:	60 ff       	sbrs	r22, 0
 452:	04 c0       	rjmp	.+8      	; 0x45c <__fp_round+0x20>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__fp_split3>:
 45e:	57 fd       	sbrc	r21, 7
 460:	90 58       	subi	r25, 0x80	; 128
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	59 f0       	breq	.+22     	; 0x47e <__fp_splitA+0x10>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	71 f0       	breq	.+28     	; 0x488 <__fp_splitA+0x1a>
 46c:	47 95       	ror	r20

0000046e <__fp_splitA>:
 46e:	88 0f       	add	r24, r24
 470:	97 fb       	bst	r25, 7
 472:	99 1f       	adc	r25, r25
 474:	61 f0       	breq	.+24     	; 0x48e <__fp_splitA+0x20>
 476:	9f 3f       	cpi	r25, 0xFF	; 255
 478:	79 f0       	breq	.+30     	; 0x498 <__fp_splitA+0x2a>
 47a:	87 95       	ror	r24
 47c:	08 95       	ret
 47e:	12 16       	cp	r1, r18
 480:	13 06       	cpc	r1, r19
 482:	14 06       	cpc	r1, r20
 484:	55 1f       	adc	r21, r21
 486:	f2 cf       	rjmp	.-28     	; 0x46c <__fp_split3+0xe>
 488:	46 95       	lsr	r20
 48a:	f1 df       	rcall	.-30     	; 0x46e <__fp_splitA>
 48c:	08 c0       	rjmp	.+16     	; 0x49e <__fp_splitA+0x30>
 48e:	16 16       	cp	r1, r22
 490:	17 06       	cpc	r1, r23
 492:	18 06       	cpc	r1, r24
 494:	99 1f       	adc	r25, r25
 496:	f1 cf       	rjmp	.-30     	; 0x47a <__fp_splitA+0xc>
 498:	86 95       	lsr	r24
 49a:	71 05       	cpc	r23, r1
 49c:	61 05       	cpc	r22, r1
 49e:	08 94       	sec
 4a0:	08 95       	ret

000004a2 <__fp_zero>:
 4a2:	e8 94       	clt

000004a4 <__fp_szero>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	66 27       	eor	r22, r22
 4a8:	77 27       	eor	r23, r23
 4aa:	cb 01       	movw	r24, r22
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

000004b0 <__gesf2>:
 4b0:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_cmp>
 4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__gesf2+0x8>
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	08 95       	ret

000004ba <__mulsf3>:
 4ba:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__mulsf3x>
 4be:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_round>
 4c2:	0e 94 10 02 	call	0x420	; 0x420 <__fp_pscA>
 4c6:	38 f0       	brcs	.+14     	; 0x4d6 <__mulsf3+0x1c>
 4c8:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscB>
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__mulsf3+0x1c>
 4ce:	95 23       	and	r25, r21
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <__mulsf3+0x1c>
 4d2:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 4d6:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_nan>
 4da:	11 24       	eor	r1, r1
 4dc:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_szero>

000004e0 <__mulsf3x>:
 4e0:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_split3>
 4e4:	70 f3       	brcs	.-36     	; 0x4c2 <__mulsf3+0x8>

000004e6 <__mulsf3_pse>:
 4e6:	95 9f       	mul	r25, r21
 4e8:	c1 f3       	breq	.-16     	; 0x4da <__mulsf3+0x20>
 4ea:	95 0f       	add	r25, r21
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	55 1f       	adc	r21, r21
 4f0:	62 9f       	mul	r22, r18
 4f2:	f0 01       	movw	r30, r0
 4f4:	72 9f       	mul	r23, r18
 4f6:	bb 27       	eor	r27, r27
 4f8:	f0 0d       	add	r31, r0
 4fa:	b1 1d       	adc	r27, r1
 4fc:	63 9f       	mul	r22, r19
 4fe:	aa 27       	eor	r26, r26
 500:	f0 0d       	add	r31, r0
 502:	b1 1d       	adc	r27, r1
 504:	aa 1f       	adc	r26, r26
 506:	64 9f       	mul	r22, r20
 508:	66 27       	eor	r22, r22
 50a:	b0 0d       	add	r27, r0
 50c:	a1 1d       	adc	r26, r1
 50e:	66 1f       	adc	r22, r22
 510:	82 9f       	mul	r24, r18
 512:	22 27       	eor	r18, r18
 514:	b0 0d       	add	r27, r0
 516:	a1 1d       	adc	r26, r1
 518:	62 1f       	adc	r22, r18
 51a:	73 9f       	mul	r23, r19
 51c:	b0 0d       	add	r27, r0
 51e:	a1 1d       	adc	r26, r1
 520:	62 1f       	adc	r22, r18
 522:	83 9f       	mul	r24, r19
 524:	a0 0d       	add	r26, r0
 526:	61 1d       	adc	r22, r1
 528:	22 1f       	adc	r18, r18
 52a:	74 9f       	mul	r23, r20
 52c:	33 27       	eor	r19, r19
 52e:	a0 0d       	add	r26, r0
 530:	61 1d       	adc	r22, r1
 532:	23 1f       	adc	r18, r19
 534:	84 9f       	mul	r24, r20
 536:	60 0d       	add	r22, r0
 538:	21 1d       	adc	r18, r1
 53a:	82 2f       	mov	r24, r18
 53c:	76 2f       	mov	r23, r22
 53e:	6a 2f       	mov	r22, r26
 540:	11 24       	eor	r1, r1
 542:	9f 57       	subi	r25, 0x7F	; 127
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	9a f0       	brmi	.+38     	; 0x56e <__mulsf3_pse+0x88>
 548:	f1 f0       	breq	.+60     	; 0x586 <__mulsf3_pse+0xa0>
 54a:	88 23       	and	r24, r24
 54c:	4a f0       	brmi	.+18     	; 0x560 <__mulsf3_pse+0x7a>
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	bb 1f       	adc	r27, r27
 554:	66 1f       	adc	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	50 40       	sbci	r21, 0x00	; 0
 55e:	a9 f7       	brne	.-22     	; 0x54a <__mulsf3_pse+0x64>
 560:	9e 3f       	cpi	r25, 0xFE	; 254
 562:	51 05       	cpc	r21, r1
 564:	80 f0       	brcs	.+32     	; 0x586 <__mulsf3_pse+0xa0>
 566:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 56a:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_szero>
 56e:	5f 3f       	cpi	r21, 0xFF	; 255
 570:	e4 f3       	brlt	.-8      	; 0x56a <__mulsf3_pse+0x84>
 572:	98 3e       	cpi	r25, 0xE8	; 232
 574:	d4 f3       	brlt	.-12     	; 0x56a <__mulsf3_pse+0x84>
 576:	86 95       	lsr	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f7 95       	ror	r31
 580:	e7 95       	ror	r30
 582:	9f 5f       	subi	r25, 0xFF	; 255
 584:	c1 f7       	brne	.-16     	; 0x576 <__mulsf3_pse+0x90>
 586:	fe 2b       	or	r31, r30
 588:	88 0f       	add	r24, r24
 58a:	91 1d       	adc	r25, r1
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret

00000594 <__fp_cmp>:
 594:	99 0f       	add	r25, r25
 596:	00 08       	sbc	r0, r0
 598:	55 0f       	add	r21, r21
 59a:	aa 0b       	sbc	r26, r26
 59c:	e0 e8       	ldi	r30, 0x80	; 128
 59e:	fe ef       	ldi	r31, 0xFE	; 254
 5a0:	16 16       	cp	r1, r22
 5a2:	17 06       	cpc	r1, r23
 5a4:	e8 07       	cpc	r30, r24
 5a6:	f9 07       	cpc	r31, r25
 5a8:	c0 f0       	brcs	.+48     	; 0x5da <__fp_cmp+0x46>
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	e4 07       	cpc	r30, r20
 5b0:	f5 07       	cpc	r31, r21
 5b2:	98 f0       	brcs	.+38     	; 0x5da <__fp_cmp+0x46>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	95 0b       	sbc	r25, r21
 5bc:	39 f4       	brne	.+14     	; 0x5cc <__fp_cmp+0x38>
 5be:	0a 26       	eor	r0, r26
 5c0:	61 f0       	breq	.+24     	; 0x5da <__fp_cmp+0x46>
 5c2:	23 2b       	or	r18, r19
 5c4:	24 2b       	or	r18, r20
 5c6:	25 2b       	or	r18, r21
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <__fp_cmp+0x3e>
 5ca:	08 95       	ret
 5cc:	0a 26       	eor	r0, r26
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__fp_cmp+0x3e>
 5d0:	a1 40       	sbci	r26, 0x01	; 1
 5d2:	a6 95       	lsr	r26
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	81 1d       	adc	r24, r1
 5d8:	81 1d       	adc	r24, r1
 5da:	08 95       	ret

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>
